//===================================================================================================
// basicMultiplyBlend.kbShader
//
//
// 2018 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix modelViewMatrix;
	matrix viewMatrix;
	matrix mvpMatrix;
	matrix projection;
	matrix inverseProjection;
	matrix viewProjection;
	float4 cameraPos;
	float4 uvScale;
};

kbShaderState {
	srcBlend Blend_DstColor
	dstBlend Blend_Zero
	blendOp BlendOp_Add

	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position      : POSITION;
	float2 uv            : TEXCOORD0;
	float4 color         : COLOR;
	float4 normal        : NORMAL;
	float4 tangent       : TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position      : SV_POSITION;
	float2 uv            : TEXCOORD0;
	float4 color         : COLOR;
	float2 position2     : TEXCOORD1;
	float3 normal        : TEXCOORD2;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color         : SV_TARGET0;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.color = input.color;
	output.position2 = output.position.zw;
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );

	return output;
}


/**
 *	pixelShader
 */
Texture2D shaderTexture;
SamplerState SampleType;

float4 pixelShader( pixelInput	input ) : SV_TARGET {
   float4 outColor = shaderTexture.Sample( SampleType, input.uv * uvScale.xy );
   return outColor;
}
