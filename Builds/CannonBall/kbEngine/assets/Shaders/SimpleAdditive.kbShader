//===================================================================================================
// SimpleAdditive.kbShader
//
//
// 2016-2018 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix mvpMatrix;
};

kbShaderState {
	srcblend Blend_One
	dstBlend Blend_One
	blendOp BlendOp_Add
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float4 position2		: TEXCOORD1;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color		: SV_TARGET0;
};


/*
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
   output.position2 = output.position;
	output.uv = input.uv;
	output.color = input.color;

	return output;
}

/*
 *	pixelShader
 */
Texture2D shaderTexture;
SamplerState SampleType;

 PS_OUTPUT pixelShader( pixelInput	input ) {
 	PS_OUTPUT output = (PS_OUTPUT) 0;

	output.Color.xyz =  shaderTexture.Sample( SampleType, input.uv ).xyz * input.color.xyz;

   if ( input.position2.z > 0.001f )
      output.Color.xyz *= 3.0f;

	return output;
}
