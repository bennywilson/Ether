cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix modelViewMatrix;
	matrix viewMatrix;
	matrix mvpMatrix;
	float4 cameraPos;
};

//-------------------------------------
struct vertexInput {
	float4 position				: POSITION;
	float2 uv					: TEXCOORD0;
	float4 color				: COLOR;
	float4 normal				: NORMAL;
	float4 tangent				: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position				: SV_POSITION;
	float4 color				: COLOR;
	float2 uv					: TEXCOORD0;
	float3 cameraDir			: TEXCOORD1;
	float3 camSpaceVecToVert	: TEXCOORD2;
};

/*
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.color = input.color;

	float3 modelPos = mul( float4(0,0,0,1), modelMatrix ).xyz ;

	output.camSpaceVecToVert = mul( input.position, modelMatrix ).xyz - mul( float4(0,0,0,1), modelMatrix ).xyz;
	output.cameraDir = modelPos - cameraPos.xyz;

	return output;
}

/*
 *	pixelShader
 */
Texture2D shaderTexture;
SamplerState SampleType;

 float4 pixelShader( pixelInput	input ) : SV_TARGET {

	/*if ( dot( normalize( input.camSpaceVecToVert ), normalize( input.cameraDir ) ) > 0.15f ) {
		clip( -1 );
	}*/
	return shaderTexture.Sample( SampleType, input.uv );
}