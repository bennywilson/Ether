//==============================================================================
// alphaParticles.kbShader
//
// 2018 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix viewProjection;
	float4 cameraPos;
};

kbShaderState {
	srcblend Blend_SrcAlpha
	dstBlend Blend_InvSrcAlpha
	blendOp BlendOp_Add
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position					: POSITION;
	float2 uv						: TEXCOORD0;
	float4 color					: COLOR;
	float2 size						: TEXCOORD1;
	float4 rotationAndDirection		: TEXCOORD2;
   	float4 billboardType			: TEXCOORD3;
};

//-------------------------------------
struct pixelInput {
	float4 position					: SV_POSITION;
	float2 uv						: TEXCOORD0;
	float4 color					: COLOR;
	float2 position2				: TEXCOORD1;
	float3 normal					: TEXCOORD2;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color					: SV_TARGET0;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {

	pixelInput output = (pixelInput)(0);

	const float3 particleWorldPos = input.position.xyz;//mul( input.position, modelMatrix ).xyz;

	float3x3 billboardMatrix;
	if ( input.billboardType.x == 0 ) {
	   // Billboard
	   float3 up = float3( 0.0f, 1.0f, 0.0f );
	   const float3 zAxis = normalize( cameraPos.xyz - particleWorldPos );
	   const float3 xAxis = normalize( cross( up, zAxis ) );
	   const float3 yAxis = normalize( cross( zAxis, xAxis ) );
	   billboardMatrix = float3x3( xAxis, yAxis, zAxis );
	} else {
	   // Axial
	   float3 heading = input.rotationAndDirection.xyz;
	   const float3 xAxis = normalize( cross( normalize( cameraPos.xyz - particleWorldPos ), heading ) );
	   const float3 yAxis = normalize( cross( heading, xAxis ) );
	   billboardMatrix = float3x3( heading, xAxis, yAxis );
	}
	const float3 offset = mul( float3( input.size.x , input.size.y, 0 ), billboardMatrix );
	output.position = mul( float4(particleWorldPos,1) + float4( offset, 0.0f ), viewProjection );

	output.uv = input.uv;
	output.color = input.color;
	output.position2 = output.position.zw;

	return output;
}

/**
 *	pixelShader
 */
Texture2D particleTexture;
SamplerState LinearSample;

 float4 pixelShader( pixelInput	input ) : SV_TARGET {
	float4 finalColor = input.color;
	finalColor = particleTexture.Sample( LinearSample, input.uv );
	return finalColor;
}
