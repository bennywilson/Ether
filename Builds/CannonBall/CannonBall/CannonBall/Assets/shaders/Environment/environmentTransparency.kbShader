//==============================================================================
// environmentTransparency.kbShader
//
// 2019 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix mvpMatrix;
};

kbShaderState {
	cullMode CullMode_BackFaces
	srcblend Blend_SrcAlpha
	dstBlend Blend_InvSrcAlpha
	blendOp BlendOp_Add
	colorWriteEnable ColorWriteEnable_rgb
}
//-------------------------------------
struct vertexInput {
	float4 position		: POSITION;
	float2 uv			: TEXCOORD0;
	float4 color		: COLOR;
	float4 normal		: NORMAL;
	float4 tangent		: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position		: SV_POSITION;
	float2 uv			: TEXCOORD0;
	float4 color		: COLOR;
	float2 position2	: TEXCOORD1;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color		: SV_TARGET0;	// Albedo.rgb, Emissive.z
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.color = input.color;
	output.position2 = output.position.zw;


	return output;
}

/**
 *	pixelShader
 */
Texture2D diffuse(white)			: register(t0);
SamplerState diffuseSampler;


 PS_OUTPUT pixelShader( pixelInput	input, bool IsFrontFace	: SV_IsFrontFace ) {
 	PS_OUTPUT output = (PS_OUTPUT) 0;

	output.Color = diffuse.Sample( diffuseSampler, input.uv );
	output.Color.w = 0.25f;
	return output;
}
 
