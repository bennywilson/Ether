//===================================================================================================
// directionalLightFill.kbShader
//
// Note that the directional light shader is responsible for copying the glow mask from the color
// buffer to the accumulation buffer
//
// 2020 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix				mvpMatrix;
	matrix				inverseViewProjection;
	matrix				lightMatrix[4];
	float4				lightDirection;
	float4				splitDistances;
	float4				lightPosition;
	float4				lightColor;
	float4				cameraPosition;
};

kbShaderState {
	srcBlend Blend_One
	dstBlend Blend_One
	blendOp BlendOp_Add
	srcBlendAlpha Blend_One			// For passing glow mask from scene color buffer to accumulation buffer
	dstBlendAlpha Blend_Zero
	blendOpAlpha BlendOp_Add
}

//-------------------------------------
struct vertexInput {
	float4 position      : POSITION;
	float2 uv            : TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position      : SV_POSITION;
	float4 position2     : TEXCOORD0;
	float2 uv            : TEXCOORD1;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.uv = mul( input.uv, (float2x2)mvpMatrix );
	output.position2 = input.position;

	return output;
}

/**
 *	pixelShader
 */
SamplerState DiffuseSamplerState;
Texture2D colorTexture(colorBuffer)				: register(t0);

SamplerState NormalSamplerState;
Texture2D normalTexture(normalBuffer)			: register(t1);

Texture2D specularTexture(specularBuffer)		: register(t2);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t3);

SamplerState ShadowMapSamplerState;
Texture2D ShadowMap(shadowBuffer)				: register(t4);

Texture2D NoiseMap(noise);

float4 pixelShader( pixelInput input ) : SV_TARGET {
	float4 diffuseColor = colorTexture.Sample( DiffuseSamplerState, input.uv );
	float4 normal = normalTexture.Sample( NormalSamplerState, input.uv );
	float4 specColor = specularTexture.Sample( DiffuseSamplerState, input.uv );
	
	normal.xyz = normalize( normal.xyz );

	float4 worldPos = float4( input.position2.xy, depthTexture.Sample( DepthSamplerState, input.uv ).r, 1 );
	worldPos = mul( worldPos, inverseViewProjection );
	worldPos /= worldPos.w;
	
	float3 toCameraVec = normalize( cameraPosition.xyz - worldPos.xyz );

	float diffuse = saturate( dot( normal.xyz, lightDirection.xyz ) );
	diffuse = diffuse * 0.8f + 0.2f;	
	if ( normal.w < 0.45 || normal.w > 0.55 )
		diffuse = 0;
	float3 finalColor = diffuseColor.xyz * diffuse * lightColor.xyz;	// todo
	return float4( finalColor, diffuseColor.w );
}