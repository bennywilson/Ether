//==============================================================================
// characterOutline.kbShader
//
// 2019 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix		modelMatrix;
	matrix		vpMatrix;
	float4x4	boneList[128];
	float4		cameraPos;
	float4		outlineParams;		// x: Thickness, y: Push back, z: Outline Color Factor, w: Mip-Level
	float4		smearParams;
	float4		clipMapMask;
};

kbShaderState {
	cullMode CullMode_BackFaces
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 normal			: NORMAL;
	float4 blendIndices		: BLENDINDICES;
	float4 boneWeights		: BLENDWEIGHT;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float2 position2		: TEXCOORD1;
	float3 normal			: TEXCOORD2;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color			: SV_TARGET0;
/*	float4 Normal			: SV_TARGET1;
	float4 Specular			: SV_TARGET2;
	float2 Depth			: SV_TARGET3;*/
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	int4 IndexVector = D3DCOLORtoUBYTE4(input.blendIndices).zyxw;
	float BlendWeightsArray[4] = (float[4])input.boneWeights;
	int   IndexArray[4] = (int[4])IndexVector;
	
	float4x4 blendedMat =	boneList[IndexArray[0]] * BlendWeightsArray[0] + boneList[IndexArray[1]] * BlendWeightsArray[1] +
							boneList[IndexArray[2]] * BlendWeightsArray[2] + boneList[IndexArray[3]] * BlendWeightsArray[3];
	
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)blendedMat );
	output.normal.xyz = normalize( mul( output.normal.xyz, (float3x3)modelMatrix ) );

	float4 Pos = mul( input.position, blendedMat );
	Pos = mul( Pos, modelMatrix );
	Pos /= Pos.w;

	if ( dot( output.normal.xyz, smearParams.xyz ) > 0 ) {
		Pos.xyz += smearParams.xyz;
	}

	Pos.xyz += output.normal.xyz * outlineParams.x;

	float3 fromCam = normalize( Pos.xyz - cameraPos.xyz );
	Pos.xyz += fromCam * outlineParams.y;
	
	output.position = mul( Pos, vpMatrix );

	output.uv = input.uv;
	//output.color = 0;//input.color;
	output.position2 = output.position.zw;


	return output;
}

/**
 *	pixelShader
 */
Texture2D colorTexture;
SamplerState DefaultSampler;

Texture2D clipMap(white);

 PS_OUTPUT pixelShader( pixelInput	input ) {
	PS_OUTPUT output = (PS_OUTPUT) 0;

	const float4 clipMapTex = 1.0f - clipMap.Sample( DefaultSampler, input.uv );

	const float clipDot = dot( clipMapMask, clipMapTex );
	clip( 0.05f - clipDot );

	const float4 colorTex = colorTexture.SampleLevel( DefaultSampler, input.uv, outlineParams.w ) * outlineParams.z;//0.75f;// * 0.5f;
	output.Color.xyz = colorTex.xyz;
	output.Color.w = 0;//colorTex.w *A 0.55;
	output.Color.w = -1.0f;
//	output.Specular = float4( 0.0f, 1.0f, 0.0f, 0.0f );
//	output.Depth.r = input.position2.x / input.position2.y;

	//output.Normal.xyz = normalize( input.normal );

	return output;
}
