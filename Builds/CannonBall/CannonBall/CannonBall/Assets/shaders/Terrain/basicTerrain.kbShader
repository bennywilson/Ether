//==============================================================================
// basicTerrain.kbShader
//
// 2018 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix mvpMatrix;
	float4 mat1And2UVScale;
	float4 mat3And4UVScale;
	float4 specFactors;
	float4 specPowerMultipliers;
	float4 clipPlane;
};

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 binormal			: COLOR;
	float4 normal			: NORMAL;
	float4 tangent			: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float2 position2		: TEXCOORD1;
	float3 tangent			: TEXCOORD2;
	float3 binormal			: TEXCOORD3;
	float3 normal			: TEXCOORD4;
	float3 worldPos			: TEXCOORD5;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color			: SV_TARGET0;
	float4 Normal			: SV_TARGET1;
	float4 Spec				: SV_TARGET2;
	float2 Depth			: SV_TARGET3;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;

			output.worldPos.xyz = mul( output.position, modelMatrix ).xyz;
	output.position = mul( output.position, mvpMatrix );
	output.uv = input.uv;
	output.position2 = output.position.zw;


	output.tangent = ( input.tangent.xyz * 2.0f ) - 1.0f;
	output.binormal = ( input.binormal.xyz * 2.0f ) - 1.0f;
	output.normal = ( input.normal.xyz * 2.0f ) - 1.0f;

	return output;
}

/**
 *	pixelShader
 */ 
SamplerState SampleType;

Texture2D splatMap		: register(t0);

Texture2D Mat1Diffuse	: register(t1);
Texture2D Mat1Normal	: register(t2);
Texture2D Mat1Specular	: register(t3);

Texture2D Mat2Diffuse	: register(t4);
Texture2D Mat2Normal	: register(t5);
Texture2D Mat2Specular	: register(t6);

Texture2D Mat3Diffuse	: register(t7);
Texture2D Mat3Normal	: register(t8);
Texture2D Mat3Specular	: register(t9);

Texture2D Mat4Diffuse	: register(t10);
Texture2D Mat4Normal	: register(t11);
Texture2D Mat4Specular	: register(t12);

struct terrainMat_t {
	float4 diffuse;
	float4 normal;
	float4 spec;
};

void GetMaterial( inout terrainMat_t terrainMat, Texture2D Diff, Texture2D Normal, Texture2D Spec, float3x3 tbn, float2 uv, float specFactor, float specPowerMultiplier ) {
	terrainMat.diffuse = Diff.Sample( SampleType, uv );
	terrainMat.normal = Normal.Sample( SampleType, uv );
	terrainMat.normal.xyz = mul( ( terrainMat.normal.xyz * 2.0f ) - 1.0f, tbn );
	terrainMat.spec = Spec.Sample( SampleType, uv );
	terrainMat.spec.x = max( max( terrainMat.spec.x, terrainMat.spec.y ), terrainMat.spec.z );
	terrainMat.spec.y = 1;
	terrainMat.spec.z = 0;
	terrainMat.spec.w = 0;
	
	terrainMat.spec.w *= specPowerMultiplier;

}

float4 BlendWeights( float4 val1, float4 val2, float4 val3, float4 val4, float4 weights ) {
	return ( val1 * weights.x ) + ( val2 * weights.y ) + ( val3 * weights.z ) + ( val4 * weights.w );
}

 PS_OUTPUT pixelShader( pixelInput	input )  {
 	PS_OUTPUT output = (PS_OUTPUT) 0;

	if ( input.worldPos.y < clipPlane.w )
		clip(-1);

	float3x3 tbn;
	tbn[0] = input.tangent.xyz;
	tbn[1] = input.binormal.xyz;
	tbn[2] = input.normal.xyz;

	terrainMat_t mat1;
	GetMaterial( mat1, Mat1Diffuse, Mat1Normal, Mat1Specular, tbn, input.uv * mat1And2UVScale.xy, specFactors.x, specPowerMultipliers.x );

	terrainMat_t mat2;
	GetMaterial( mat2, Mat2Diffuse, Mat2Normal, Mat2Specular, tbn, input.uv * mat1And2UVScale.zw, specFactors.y, specPowerMultipliers.y );

	terrainMat_t mat3;
	GetMaterial( mat3, Mat3Diffuse, Mat3Normal, Mat3Specular, tbn, input.uv * mat3And4UVScale.xy, specFactors.z, specPowerMultipliers.z );

	terrainMat_t mat4;
	GetMaterial( mat4, Mat4Diffuse, Mat4Normal, Mat4Specular, tbn, input.uv * mat3And4UVScale.zw, specFactors.w, specPowerMultipliers.w );

	float4 weights = splatMap.Sample( SampleType, input.uv );
	weights.xyz = normalize( weights.xyz );
	output.Color = BlendWeights( mat1.diffuse, mat2.diffuse, mat3.diffuse, mat4.diffuse, weights );
	output.Color.w = 0.0f;
	output.Normal = BlendWeights( mat1.normal, mat2.normal, mat3.normal, mat4.normal, weights );
	output.Normal.xyz = normalize( output.Normal.xyz );
	output.Normal.w = 0.5f;
	output.Spec = BlendWeights( mat1.spec, mat2.spec, mat3.spec, mat4.spec, weights ) / 3.0f;
	output.Depth.r = input.position2.x / input.position2.y;

	return output;
}
