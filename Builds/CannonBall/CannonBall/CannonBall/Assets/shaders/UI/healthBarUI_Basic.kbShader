//===================================================================================================
// healthBarUI_Basic.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	float4					normalizedScreenSize_Anchor;
	float4					healthBarBounds;		// Normalized from 0-1 in UV space
	float4					normalizedHealth;
	float4					barTextureWeights;			// 
};

kbShaderState {
	srcBlend				Blend_SrcAlpha
	dstBlend				Blend_InvSrcAlpha
	colorwriteenable		colorwriteenable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 position2		: TEXCOORD1;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.position.xy *= normalizedScreenSize_Anchor.xy;

	// Move to the anchor point
	float2 offset = normalizedScreenSize_Anchor.zw * 2.0f - 1.0f;
	offset.y *= -1.0f;
	output.position.xy += offset;
	
	output.uv = input.uv;
	output.position2 = input.position;

	return output;
}

/**
 *	pixelShader
 */
SamplerState DiffuseSamplerState;
Texture2D baseTexture(white)					: register(t0);

Texture2D fillTexture_1(white)					: register(t1);

Texture2D fillTexture_2(white)					: register(t2);

float4 pixelShader( pixelInput input ) : SV_TARGET {

	float4 frameColor = baseTexture.Sample( DiffuseSamplerState, input.uv );

	float4 finalColor = frameColor;
	
	float uLen = healthBarBounds.z - healthBarBounds.x;
	if ( input.uv.x >= healthBarBounds.x && input.uv.x <= healthBarBounds.z && input.uv.y >= healthBarBounds.y && input.uv.y <= healthBarBounds.w ) {
		float2 barUV = ( input.uv - healthBarBounds.xy ) / ( healthBarBounds.zw - healthBarBounds.xy );
		float4 barColor1 = fillTexture_1.Sample( DiffuseSamplerState, barUV );
		float4 barColor2 = fillTexture_2.Sample( DiffuseSamplerState, barUV );

		float rightEdge = healthBarBounds.x + ( uLen * normalizedHealth.x );
		if ( input.uv.x > rightEdge ) {
			barColor1 = barColor2 = float4( 0.0f, 0.0f, 0.0f, barColor1.w );
		}
		float4 barColor = barColor2 * barTextureWeights.x + barColor2 * barTextureWeights.y;
		finalColor = lerp( barColor, frameColor, frameColor.a );
	
	}

	return finalColor;//baseTexture.Sample( DiffuseSamplerState, input.uv );
}

