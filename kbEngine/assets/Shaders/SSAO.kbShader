//===================================================================================================
// SSAO.kbShader
//
//
// 2019 blk 1.0
//===================================================================================================
cbuffer matrixBuffer {
   matrix				mvpMatrix;
	matrix	viewMatrix;
   matrix               inverseViewProjection;
   float4				offsetsAndWeights[16];
   int					numSamples;
};

kbShaderState {
	srcBlend Blend_DstColor
	dstBlend Blend_Zero
	colorwriteenable colorwriteenable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 position2		: TEXCOORD1;
};

/// vertexShader
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.uv = input.uv;
	output.position2 = input.position;

	return output;
}

/// SSAOPixelMain
SamplerState DiffuseSamplerState;
Texture2D colorTexture(colorBuffer)				: register(t0);

SamplerState NormalSamplerState;
Texture2D normalTexture(normalBuffer)			: register(t1);

Texture2D specularTexture(specularBuffer)		: register(t2);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t3);

SamplerState ShadowMapSamplerState;
Texture2D ShadowMap(shadowBuffer)				: register(t4);

Texture2D NoiseTex(noise);

float CalculateOcclusion( float2 ab, float2 uv, float3 basePixelWorldPos, float3 basePixelWorldNormal ) {

	float maxOcclusionAngleDot = 0.5f;
	float g_intensity = 0.9f;
	float g_scale = 4.5f;

	float4 testPos = float4( ab, depthTexture.Sample( DepthSamplerState, uv ).r, 1 );
	testPos = mul( testPos, inverseViewProjection );
	testPos /= testPos.w;
	
	float3 diff = testPos.xyz - basePixelWorldPos;

	float3 v = normalize( diff );
	float d = length( diff ) * g_scale;

	return max( 0.0f, dot( normalize( basePixelWorldNormal ), v ) - maxOcclusionAngleDot ) * ( 1.0f / ( 1.0f + d ) ) * g_intensity;


}


float4 pixelShader( pixelInput input ) : SV_TARGET {

	float4 diffuseColor = colorTexture.Sample( DiffuseSamplerState, input.uv );
	float3 normal = normalTexture.Sample( NormalSamplerState, input.uv ).xyz;
	float4 specColor = specularTexture.Sample( DiffuseSamplerState, input.uv );
	float theDepth = depthTexture.Sample( DepthSamplerState, input.uv ).r;
	if ( theDepth == 0)
		return 1;
	float4 worldPos = float4( input.position2.xy, depthTexture.Sample( DepthSamplerState, input.uv ).r, 1 );
	worldPos = mul( worldPos, inverseViewProjection );
	worldPos /= worldPos.w;

	int iterations = 4;
	float ao = 0;
	const float radius = 7.0f;

	const float2 pixelSize = float2( 1.0f / 1920.0f, 1.0f / 1080.0f );
	const float2 noise = NoiseTex.Sample( DiffuseSamplerState, input.uv ).xy * 0.0001f;
	const float2 textureSampleOffset = ( noise + pixelSize ) * radius;
	const float2 clipSpaceSampleOffset =  ( 2.0f * ( noise + pixelSize ) * radius );
	ao += CalculateOcclusion( input.position2.xy + float2( clipSpaceSampleOffset.x, -clipSpaceSampleOffset.y ), input.uv + float2( textureSampleOffset.x, textureSampleOffset.y ), worldPos.xyz, normal );
	ao += CalculateOcclusion( input.position2.xy + float2( -clipSpaceSampleOffset.x, -clipSpaceSampleOffset.y ), input.uv + float2( -textureSampleOffset.x, textureSampleOffset.y ), worldPos.xyz, normal );
	ao += CalculateOcclusion( input.position2.xy + float2( -clipSpaceSampleOffset.x, clipSpaceSampleOffset.y ), input.uv + float2( -textureSampleOffset.x, -textureSampleOffset.y ), worldPos.xyz, normal );
	ao += CalculateOcclusion( input.position2.xy + float2( clipSpaceSampleOffset.x, clipSpaceSampleOffset.y ), input.uv + float2( textureSampleOffset.x, -textureSampleOffset.y ), worldPos.xyz, normal );

	//return 1;//
	return 1;//(1 - ao);
}
