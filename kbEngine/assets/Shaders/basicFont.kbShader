//===================================================================================================
// basicFont.kbShader
//
//
// 2019 blk 1.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix mvpMatrix;
};

kbShaderState {
	srcblend Blend_SrcAlpha
	dstBlend Blend_InvSrcAlpha
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position		: POSITION;
	float2 uv			: TEXCOORD0;
	float4 color		: COLOR;
};

//-------------------------------------
struct pixelInput {
	float4 position		: SV_POSITION;
	float2 uv			: TEXCOORD0;
	float4 color		: COLOR;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color		: SV_TARGET0;
};


/*
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.color = input.color;

	return output;
}

/*
 *	pixelShader
 */
Texture2D shaderTexture;
SamplerState SampleType;

 PS_OUTPUT pixelShader( pixelInput	input ) {
 	PS_OUTPUT output = (PS_OUTPUT) 0;

	float4 textureColor = shaderTexture.Sample( SampleType, input.uv );
	output.Color.xyz = textureColor.xyz * input.color.xyz;
	output.Color.w = dot( textureColor.xyz, float3( 0.3f, 0.59f, 0.11f ) );

	return output;
}
