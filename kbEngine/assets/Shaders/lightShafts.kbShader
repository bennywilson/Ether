//===================================================================================================
// lightShafts.kbShader
//
//
// 2017-2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix mvpMatrix;
	float4 color;
	float4 multiplier;
};

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float4 position2		: TEXCOORD1;
	float2 uv				: TEXCOORD0;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.uv = mul( float4( input.uv, 0.0f, 1.0f), mvpMatrix ).xy;

	output.position2 = ( input.position * 0.5f ) + 0.5f;
	output.position2.y = 1.0f - output.position2.y;

	return output;
}

/**
 *	pixelShader
 */
SamplerState FlareSampleState;
Texture2D flareTexture;

SamplerState DepthSamplerState;
Texture2D depthTexture;

float4 pixelShader( pixelInput input ) : SV_TARGET {
	const float depth = depthTexture.Sample( DepthSamplerState, input.uv ).r;
	const float2 offScreen = sign(saturate( 1.0f - abs( ( input.uv * 2.0f ) - 1.0f ) ) ); // Use vertex interpolants instead?
	return 3.0f * flareTexture.Sample( FlareSampleState, input.position2.xy ) * ( 1.0f - sign( depth ) ) * color * min(offScreen.x, offScreen.y);
}