//===================================================================================================
// pointLight.kbShader
//
//
// 2016-2017 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
   matrix               mvpMatrix;
   matrix               inverseViewProjection;
   matrix               lightMatrix[4];
   float4               splitDistances;
   float4               lightDirection;
   float4               lightPosition; // xyz is position, w is light radius
   float4               lightColor;
   float4               cameraPosition;
};

//-------------------------------------
struct vertexInput {
	float4 position      : POSITION;
	float2 uv            : TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position      : SV_POSITION;
	float4 position2     : TEXCOORD1;
	float2 uv            : TEXCOORD0;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.uv = mul( input.uv, (float2x2)mvpMatrix );
	output.position2 = input.position;

	return output;
}

/**
 *	pixelShader
 */
SamplerState DiffuseSamplerState;
Texture2D colorTexture				: register(t0);

SamplerState NormalSamplerState;
Texture2D normalTexture				: register(t1);

Texture2D specularTexture			: register(t2);

SamplerState DepthSamplerState;
Texture2D depthTexture				: register(t3);

SamplerState ShadowMapSamplerState;
Texture2D ShadowMap					: register(t4);

float4 pixelShader( pixelInput input ) : SV_TARGET {

   const float4 worldDiffuseColor = colorTexture.Sample( DiffuseSamplerState, input.uv ).xyzw;
   const float3 worldNormal = normalTexture.Sample( NormalSamplerState, input.uv ).xyz;

   float4 worldPosition = float4( input.position2.xy, depthTexture.Sample( DepthSamplerState, input.uv ).r, 1 );
   worldPosition = mul( worldPosition, inverseViewProjection );
   worldPosition /= worldPosition.w;

   const float worldPosToLightDist = length( lightPosition.xyz - worldPosition.xyz );
   const float3 worldPosToLight = ( lightPosition.xyz - worldPosition.xyz ) / worldPosToLightDist;
   const float lightDotNormal = saturate( dot( worldNormal, worldPosToLight ) );
   const float lightAttenuation = saturate( 1.0f - worldPosToLightDist / lightPosition.w );
   float DistFromCamera = length( worldPosition.xyz - lightPosition.xyz );

	float3 finalColor = worldDiffuseColor.xyz * lightDotNormal * lightColor.xyz * lightAttenuation;
	return float4( finalColor, worldDiffuseColor.w );
}