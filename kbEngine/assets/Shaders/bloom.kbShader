//===================================================================================================
// bloom.kbShader
//
//
// 2017 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
   matrix   mvpMatrix;
   float4   offsetsAndWeights[16];
   int      numSamples;
};

//-------------------------------------
struct vertexInput {
	float4 position		: POSITION;
	float2 uv			   : TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position      : SV_POSITION;
	float2 uv            : TEXCOORD0;
	float4 position2     : TEXCOORD1;
};

/**
 *	bloomGatherVertexMain
 */
pixelInput bloomGatherVertexMain( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.uv = mul( input.uv, mvpMatrix );
	output.position2 = input.position;

	return output;
}

/**
 *	bloomGatherPixelMain
 */
Texture2D sceneTexture;
SamplerState sceneColorSampler;


float4 bloomGatherPixelMain( pixelInput	input ) : SV_TARGET {
	float4 inSceneColor = sceneTexture.Sample( sceneColorSampler, input.uv );
   float maxComponent = max( inSceneColor.x, max( inSceneColor.y, inSceneColor.z ) );
   if ( maxComponent <= 2.5f ) {
      return 0.0f;
   }
	return inSceneColor;
}

/**
 *	bloomBlurVertexMain
 */
pixelInput bloomBlurVertexMain( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.uv = mul( input.uv, mvpMatrix );
	output.position2 = input.position;

	return output;
}

/**
 *	bloomBlurPixelMain
 */
float4 bloomBlurPixelMain( pixelInput	input ) : SV_TARGET {

	float4 inSceneColor = sceneTexture.Sample( sceneColorSampler, input.uv ) * offsetsAndWeights[0];

   for ( int i = 1; i < numSamples; i++ ) {
      inSceneColor += sceneTexture.Sample( sceneColorSampler, input.uv + offsetsAndWeights[i].xy ) * offsetsAndWeights[i].z;
      inSceneColor += sceneTexture.Sample( sceneColorSampler, input.uv - offsetsAndWeights[i].xy ) * offsetsAndWeights[i].z;
   }

	return inSceneColor;
}
