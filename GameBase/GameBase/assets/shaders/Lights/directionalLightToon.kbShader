//===================================================================================================
// directionalLightToon.kbShader
//
// Note that the directional light shader is responsible for copying the glow mask from the color
// buffer to the accumulation buffer
//
// 2018-2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix				mvpMatrix;
	matrix				inverseViewProjection;
	matrix				lightMatrix[4];
	float4				splitDistances;
	float4				lightDirection;
	float4				lightPosition;
	float4				lightColor;
	float4				cameraPosition;
	float4				diffuseColorBand;
	float4				specularColorBand;
	float4				rimParams;
	float4				rimColor;
	float4				nonToonDiffuseScaleAndBias;
	float4				shadowParams;		// x - depth bias
};

kbShaderState {
	srcBlend Blend_One
	dstBlend Blend_One
	blendOp BlendOp_Add
	srcBlendAlpha Blend_One			// For passing glow mask from scene color buffer to accumulation buffer
	dstBlendAlpha Blend_Zero
	blendOpAlpha BlendOp_Add
}

//-------------------------------------
struct vertexInput {
	float4 position      : POSITION;
	float2 uv            : TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position      : SV_POSITION;
	float4 position2     : TEXCOORD0;
	float2 uv            : TEXCOORD1;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.uv = mul( input.uv, (float2x2)mvpMatrix );
	output.position2 = input.position;

	return output;
}

/**
 *	pixelShader
 */
SamplerState DiffuseSamplerState;
Texture2D colorTexture(colorBuffer)				: register(t0);

SamplerState NormalSamplerState;
Texture2D normalTexture(normalBuffer)			: register(t1);

Texture2D specularTexture(specularBuffer)		: register(t2);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t3);

SamplerState ShadowMapSamplerState;
Texture2D ShadowMap(shadowBuffer)				: register(t4);

float4 pixelShader( pixelInput input ) : SV_TARGET {
	float4 diffuseColor = colorTexture.Sample( DiffuseSamplerState, input.uv );
	float4 normal = normalTexture.Sample( NormalSamplerState, input.uv );
	float4 specColor = specularTexture.Sample( DiffuseSamplerState, input.uv );
	
	normal.xyz = normalize( normal.xyz );

	float4 worldPos = float4( input.position2.xy, depthTexture.Sample( DepthSamplerState, input.uv ).r, 1 );
	worldPos = mul( worldPos, inverseViewProjection );
	worldPos /= worldPos.w;
	
	float3 toCameraVec = normalize( cameraPosition.xyz - worldPos.xyz );
	float diffuse = saturate( dot( normal.xyz, lightDirection.xyz ) ) * 0.8f + 0.2f;

	// Shadow
	float DistFromCamera = length( worldPos.xyz - cameraPosition.xyz );
	
	int index = 0;
	float2 offset = float2( 0.0f, 0.0f );
	
	if ( DistFromCamera > splitDistances.z ) {
	   index = 3.0f;
	   offset.x += 0.5f;
	   offset.y += 0.5f;
	} else if ( DistFromCamera > splitDistances.y ) {
	   index = 2.0f;
	   offset.y += 0.5f;
	} else if ( DistFromCamera > splitDistances.x ) {
	   index = 1.0f;
	   offset.x += 0.5f;
	}  
	
	float4 shadowTex = mul( worldPos, lightMatrix[index] );
	shadowTex /= shadowTex.w;
	shadowTex.xy *= 0.5f;
	shadowTex.xy += offset;
	
	if ( DistFromCamera < splitDistances.w ) {
	   if ( ShadowMap.Sample( ShadowMapSamplerState, shadowTex.xy ).r < shadowTex.z - shadowParams.x ) {
	      diffuse = 0;
	   }
	}
	

	float3 lightReflect = ( 2.0f * dot( normal.xyz, lightDirection.xyz ) * normal.xyz ) - lightDirection.xyz;
	float spec = saturate( dot( lightReflect, toCameraVec ) );
	float3 rimLight = 0;

	if ( normal.w <= 0.2f ) {
		diffuse = smoothstep( diffuseColorBand.x, diffuseColorBand.y, diffuse ) * diffuseColorBand.z + diffuseColorBand.w;

		const float oneMinusRimDot = 1.0f - dot( normal.xyz, toCameraVec );
	 rimLight = rimColor.xyz * smoothstep( rimParams.x, rimParams.y, oneMinusRimDot ) * lightColor.xyz;// * specColor.z;
//if (  normal.w == 0 )
	//		return float4( diffuseColor * lightColor );
	//	spec = smoothstep( specularColorBand.x, specularColorBand.y, spec ) * specularColorBand.z + specularColorBand.w;
	} else {
		diffuse = ( diffuse * nonToonDiffuseScaleAndBias.x ) + nonToonDiffuseScaleAndBias.y;
	}
		
	spec = pow( abs( spec ), max( specColor.y, 1.0f ) ) * specColor.x;
	const float3 emissive = diffuseColor.xyz * diffuseColor.w;
//	diffuseColor.w = max( max( emissive.x, emissive.y ), emissive.z );
//	diffuseColor.w = diffuseColor.w - 1.0f;
//	if ( diffuseColor.w > 0 ) diffuseColor.w += 1.0f;
	float3 finalColor = diffuseColor.xyz * diffuse * lightColor.xyz + spec.xxx + emissive * 0.2f;	// todo
	finalColor += rimLight.xyz * rimParams.z;

	return float4( finalColor, diffuseColor.w );
}