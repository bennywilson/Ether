//===================================================================================================
// directionalLightToon_NoShadow.kbShader
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix				mvpMatrix;
	matrix				inverseViewProjection;
	matrix				lightMatrix[4];
	float4				splitDistances;
	float4				lightDirection;
	float4				lightPosition;
	float4				lightColor;
	float4				cameraPosition;
	float4				diffuseColorBand;
	float4				rimParams;			// x: Lower dot, y: Upper dot, z: final multiplier
	float4				rimColor;
	float4				nonToonDiffuseScaleAndBias;
};

kbShaderState {
	srcBlend Blend_One
	dstBlend Blend_One
	blendOp BlendOp_Add
	srcBlendAlpha Blend_One			// For passing glow mask from scene color buffer to accumulation buffer
	dstBlendAlpha Blend_Zero
	blendOpAlpha BlendOp_Add
	colorWriteEnable colorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position      : POSITION;
	float2 uv            : TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position      : SV_POSITION;
	float4 position2     : TEXCOORD0;
	float2 uv            : TEXCOORD1;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.uv = mul( input.uv, (float2x2)mvpMatrix );
	output.position2 = input.position;

	return output;
}

/**
 *	pixelShader
 */
SamplerState DiffuseSamplerState;
Texture2D colorTexture(colorBuffer)				: register(t0);

SamplerState NormalSamplerState;
Texture2D normalTexture(normalBuffer)			: register(t1);

Texture2D specularTexture(specularBuffer)		: register(t2);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t3);

SamplerState ShadowMapSamplerState;
Texture2D ShadowMap(shadowBuffer)				: register(t4);

Texture2D NoiseMap(noise);

float4 pixelShader( pixelInput input ) : SV_TARGET {
	float4 diffuseColor = colorTexture.Sample( DiffuseSamplerState, input.uv );
	float4 normal = normalTexture.Sample( NormalSamplerState, input.uv );
	float4 specColor = specularTexture.Sample( DiffuseSamplerState, input.uv );
	
	normal.xyz = normalize( normal.xyz );

	float4 worldPos = float4( input.position2.xy, depthTexture.Sample( DepthSamplerState, input.uv ).r, 1 );
	worldPos = mul( worldPos, inverseViewProjection );
	worldPos /= worldPos.w;
	
	float3 toCameraVec = normalize( cameraPosition.xyz - worldPos.xyz );

	float shadowFactor = 1.0f;
	float diffuse = saturate( dot( normal.xyz, lightDirection.xyz ) ) * shadowFactor;
	diffuse = diffuse * 0.8f + 0.2f;	

	float3 lightReflect = ( 2.0f * dot( normal.xyz, lightDirection.xyz ) * normal.xyz ) - lightDirection.xyz;
	float spec = saturate( dot( lightReflect, toCameraVec ) ) * shadowFactor;
	float3 rimLight = 0;

	if ( normal.w <= 0.2f ) {
		diffuse = smoothstep( diffuseColorBand.x, diffuseColorBand.y, diffuse ) * diffuseColorBand.z + diffuseColorBand.w;

		const float oneMinusRimDot = 1.0f - dot( normal.xyz, toCameraVec );
		rimLight = rimColor.w * ( rimColor.xyz * smoothstep( rimParams.x, rimParams.y, oneMinusRimDot ) * lightColor.xyz );// * specColor.z;
	} else {
		diffuse = ( diffuse * nonToonDiffuseScaleAndBias.x ) + nonToonDiffuseScaleAndBias.y;
	}
		
	spec = pow( abs( spec ), max( specColor.y, 1.0f ) ) * specColor.x;
	const float3 emissive = diffuseColor.xyz * diffuseColor.w;
	float3 finalColor = diffuseColor.xyz * diffuse * lightColor.xyz + spec.xxx + emissive * 0.2f;	// todo
	finalColor += rimLight.xyz * rimParams.z * shadowFactor;

	return float4( finalColor, diffuseColor.w );
}