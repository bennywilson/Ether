//==============================================================================
// unwrap.kbShader
//
// 2018 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix	modelMatrix;
	float4	color;
	float4	hitLocation;
	float4	hitDirection;
};

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 localPos			: TEXCOORD1;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = float4( ( 2.0f * input.uv ) - 1.0f, 0.0f, 1.0f );
	output.position.y = -output.position.y;
	output.uv = input.uv;
	output.localPos = input.position;
	return output;
}

/**
 *	pixelShader
 */
Texture2D baseTexture			: register(t0);
SamplerState SampleType;

Texture2D noiseTex				: register(t1);
Texture2D scorchTex				: register(t2);

float4 pixelShader( pixelInput	input ) : SV_TARGET {

	float4 returnColor = 0;

	returnColor.xyz = 1.0f;
	float noise = noiseTex.Sample( SampleType, input.uv ).r * 1.f;
	float3 closestPt = dot( ( input.localPos.xyz - hitLocation.xyz ), hitDirection.xyz ) * hitDirection.xyz + hitLocation.xyz;

	float2 scorchUV = 0.5f + ( 0.5f * (input.localPos.yz - closestPt.yz) / ( hitDirection.w * hitLocation.w ) );
	scorchUV = saturate(scorchUV);
	returnColor.xyz = scorchTex.Sample( SampleType, scorchUV ).x;

	if ( length( closestPt - input.localPos.xyz ) > 1.0f )
		returnColor.w = 1.0f;

	float normalizedDist = saturate( length( closestPt - input.localPos.xyz ) / hitLocation.w );
	if ( normalizedDist - noise > 0.4f )
		returnColor.w = 1.0f;
	
	return returnColor;
}
