//==============================================================================
// holey_wall.kbShader
//
// 2018 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix modelViewMatrix;
	matrix viewMatrix;
	matrix mvpMatrix;
	matrix projection;
	matrix inverseProjection;
	matrix viewProjection;
	float4 cameraPos;
};

//-------------------------------------
struct vertexInput {
	float4 position		: POSITION;
	float2 uv			: TEXCOORD0;
	float4 color		: COLOR;
	float4 normal		: NORMAL;
	float4 tangent		: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position		: SV_POSITION;
	float2 uv			: TEXCOORD0;
	float4 color		: COLOR;
	float2 position2	: TEXCOORD1;
	float4 TBN0			: TEXCOORD2;
	float4 TBN1			: TEXCOORD3;
	float4 TBN2			: TEXCOORD4;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color		: SV_TARGET0;
	float4 Normal		: SV_TARGET1;
	float4 Specular		: SV_TARGET2;
	float2 Depth		: SV_TARGET3;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.color = input.color;
	output.position2 = output.position.zw;


	const float3 worldTangent = normalize( mul( (input.tangent.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix ) );
	const float3 worldNormal = normalize( mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix ) );
	const float3 worldBitangent = normalize( cross( worldNormal, worldTangent ) ) * ( input.tangent.w * 2.0f - 1.0f );

	output.TBN0 = float4(worldTangent.x, worldBitangent.x, worldNormal.x, 0 );
	output.TBN1 = float4(worldTangent.y, worldBitangent.y, worldNormal.y, 0 );
	output.TBN2 = float4(worldTangent.z, worldBitangent.z, worldNormal.z, 0 );

	return output;
}

/**
 *	pixelShader
 */
Texture2D diffuse					: register(t0);
SamplerState diffuseSampler;

Texture2D normal					: register(t1);
SamplerState normalSampler;

Texture2D holeTex					: register(t2);

 PS_OUTPUT pixelShader( pixelInput	input ) {
 	PS_OUTPUT output = (PS_OUTPUT) 0;

	//output.Color.xyz = clamp( saturate(diffuse.Sample( diffuseSampler, input.uv ).xyz * 0.25f), 0.25f, 1.0f );

	output.Color.xyz = diffuse.Sample( diffuseSampler, input.uv ).xyz * ( 1.0f - holeTex.Sample( diffuseSampler, input.uv ).xyz );
	output.Depth.r = input.position2.x / input.position2.y;
	output.Specular =  float4( 0.08f * output.Color.xyz, 15.0f );//0.1f * output.Color.xyzx;//float4( 0.0f, 0.0f, 0.0f, 1.0f );

	float3x3 TBN = float3x3( normalize( input.TBN0.xyz ), normalize( input.TBN1.xyz ), normalize( input.TBN2.xyz ) );
	float3 tangentNormal = normalize( normal.Sample( normalSampler, input.uv ).xyz * 2.0f - 1.0f );
	output.Normal.xyz = mul( tangentNormal, TBN );
	return output;
}
