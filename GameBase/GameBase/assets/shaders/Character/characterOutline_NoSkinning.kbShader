//==============================================================================
// characterOutline_NoSkinning.kbShader
//
// 2019 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix      modelMatrix;
	matrix		vpMatrix;
	matrix      mvpMatrix;
	float4		cameraPos;
};

kbShaderState {
	cullMode CullMode_None
	srcblend Blend_SrcAlpha
	dstBlend Blend_InvSrcAlpha
	blendOp BlendOp_Add
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 normal			: NORMAL;
};

//-------------------------------------
struct pixelInput {
	float4      position	: SV_POSITION;
	float2      uv			: TEXCOORD0;
	float2      position2	: TEXCOORD1;
	float3      normal		: TEXCOORD2;
	float3		worldPos	: TEXCOORD3;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	float4 Pos = input.position;
	float3 objCenter = float3(  modelMatrix[3].xyz );
	float distFromCam = length( cameraPos.xyz  - objCenter );

	float3 normal = (input.normal.xyz * 2.0f ) - 1.0f;
	Pos.xyz += normal * 0.03f;

	output.position = mul( Pos, modelMatrix );

	
	float3 fromCam = normalize( cameraPos.xyz  - output.position.xyz  );//output.position.xyz );
	output.position.xyz -= fromCam * 5;
	output.worldPos = output.position.xyz;
	output.position = mul( output.position, vpMatrix );

	output.uv = input.uv;
	//output.color = 0;//input.color;
	output.position2 = output.position.zw;
	output.normal.xyz = mul(  (input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );

	return output;
}

/**
 *	pixelShader
 */
Texture2D colorTexture		: register(t0);
SamplerState SampleType;

 
float4 pixelShader( pixelInput	input ) : SV_TARGET0 {
	float4 output = (float4) 0;

	const float4 colorTex = colorTexture.Sample( SampleType, input.uv );

	float fresnel = abs( dot( normalize( input.worldPos.xyz - cameraPos.xyz ), input.normal ) );
	output.xyz = 0.0f;

	//output.w = 1.0f - (( fresnel * 0.5f ) );
output.w = 1.0f;//1.0f - smoothstep( -0.5, 1.0, output.w );
	return output;
}
