//===================================================================================================
// shellTrailParticle.kbShader
//
//
// 2018-2025 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
   matrix modelMatrix;
   matrix modelViewMatrix;
   matrix viewMatrix;
   matrix mvpMatrix;
   matrix projection;
   matrix inverseProjection;
   matrix viewProjection;
   float4 cameraPosition;
   float4 time;
};

kbShaderState {
	srcblend Blend_One
	dstBlend Blend_One
	blendOp BlendOp_Add
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
   float4 position               : POSITION;
   float2 uv                     : TEXCOORD0;
   float4 color                  : COLOR;
   float2 size                   : TEXCOORD1;
   float4 rotationAndDirection   : TEXCOORD2;
};

//-------------------------------------
struct pixelInput {
	float4 position               : SV_POSITION;
	float2 uv                     : TEXCOORD0;
	float4 color                  : COLOR;
	float2 position2              : TEXCOORD1;
	float3 normal                 : TEXCOORD2;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color                  : SV_TARGET0;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	const float3 particleWorldPos = input.position.xyz;//mul( input.position, modelMatrix ).xyz;

	float3x3 billboardMatrix;
	if ( input.color.a == 0 ) {
	   // Billboard
	   float3 up = float3( 0.0f, 1.0f, 0.0f );
	   const float3 zAxis = normalize( cameraPosition.xyz - particleWorldPos );
	   const float3 xAxis = normalize( cross( up, zAxis ) );
	   const float3 yAxis = normalize( cross( zAxis, xAxis ) );
	   billboardMatrix = float3x3( xAxis, yAxis, zAxis );
	} else {
	   // Axial
	   float3 heading = input.rotationAndDirection.xyz;
	   const float3 xAxis = normalize( cross( normalize( cameraPosition.xyz - particleWorldPos ), heading ) );
	   const float3 yAxis = normalize( cross( heading, xAxis ) );
	   billboardMatrix = float3x3( heading, xAxis, yAxis );
	}

	const float3 offset = mul( float3( input.size.x , input.size.y, 0 ), billboardMatrix );
	output.position = mul( float4(particleWorldPos,1) + float4( offset, 0.0f ), viewProjection );

	output.uv = input.uv;
	output.color = input.color;
	output.position2 = output.position.zw;

	return output;
}

/**
 *	pixelShader
 */
Texture2D shaderTexture;
SamplerState SampleType;

 float4 pixelShader( pixelInput	input ) : SV_TARGET {

	float2 uv = input.uv;

	float timeScale = 1.0f;
	float pulseFreq = 15.f;
	float amp = 0.01f * ( 1.0f - uv.x ) + 0.01f;

	uv.y += amp * sin( input.color.x * 7.0f + ( uv.x * pulseFreq + timeScale * time.x ) );

	return float4(shaderTexture.Sample( SampleType, uv ).xyz * 0.25f, 1.0f);
}
