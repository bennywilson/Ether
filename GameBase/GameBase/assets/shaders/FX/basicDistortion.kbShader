//===================================================================================================
// basicDistortion.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix modelViewMatrix;
	matrix viewMatrix;
	matrix mvpMatrix;
	matrix projection;
	matrix inverseProjection;
	matrix viewProjection;
	float4 cameraPos;
};

kbShaderState {
	srcBlend Blend_SrcAlpha
	dstBlend Blend_InvSrcAlpha
	blendOp BlendOp_Add

	srcBlendAlpha Blend_One
	dstBlendAlpha Blend_Zero
	blendOpAlpha BlendOp_Add
}

//-------------------------------------
struct vertexInput {
	float4 position      : POSITION;
	float2 uv            : TEXCOORD0;
	float4 color         : COLOR;
	float4 normal        : NORMAL;
	float4 tangent       : TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position      : SV_POSITION;
	float2 uv            : TEXCOORD0;
	float4 color         : COLOR;
	float2 position2     : TEXCOORD1;
	float3 normal        : TEXCOORD2;
	float4 screenPos	 : TEXCOORD3;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color         : SV_TARGET0;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.screenPos = output.position;
	output.uv = input.uv;
	output.color = input.color;
	output.position2 = output.position.zw;
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );

	return output;
}

/**
 *	pixelShader
 */
Texture2D colorTexture(scenecolor)				: register(t0);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t1);

Texture2D distortionTexture;
SamplerState SampleType;

float4 pixelShader( pixelInput input ) : SV_TARGET {

	float2 testUv = input.screenPos.xy / input.screenPos.w;
	testUv.y = -testUv.y;
	testUv = testUv * 0.5f + 0.5f;

	float4 distortionVec = distortionTexture.Sample( SampleType, input.uv * 5);
	distortionVec.xy = 0.05f * ( ( distortionVec.xy ) * 2.0f - 1.0f);
	float2 distfromEdge = min( input.uv, 1.0f - input.uv );
	float2 distortionFade;
	distortionFade.x = smoothstep( 0, 0.15f, distfromEdge.x );
	distortionFade.y = smoothstep( 0, 0.15f, distfromEdge.y );

	float finalDistort = min( distortionFade.x, distortionFade.y );

	distfromEdge = min( testUv, 1.0f - testUv );
	distortionFade.x = smoothstep( 0, 0.15f, distfromEdge.x );
	distortionFade.y = smoothstep( 0, 0.15f, distfromEdge.y );
	finalDistort = min( finalDistort, min( distortionFade.x, distortionFade.y ) );

	float depth = depthTexture.Sample( DepthSamplerState, testUv ).r;
	if ( depth < (input.position2.x / input.position2.y) )
		finalDistort = 0;

	distortionVec *= finalDistort;

	float4 outColor = colorTexture.Sample( SampleType, testUv + distortionVec.xy );

	outColor.a = 1.0f;
	return outColor;
}
