//===================================================================================================
// basicDistortion.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix mvpMatrix;
	float4 edgeFadeColor;		// xyz: Color edge will fade out to.
	float4 edgeFadeParams;		// x: Start fade Dist, y: End fade Dist, z: Use Fade
	float4 distortionParams;	// x: U offset, y: V offset, z: Magnitude
}

kbShaderState {
	srcBlend Blend_SrcAlpha
	dstBlend Blend_InvSrcAlpha
	blendOp BlendOp_Add

	srcBlendAlpha Blend_One
	dstBlendAlpha Blend_Zero
	blendOpAlpha BlendOp_Add
}

//-------------------------------------
struct vertexInput {
	float4 position      : POSITION;
	float2 uv            : TEXCOORD0;
	float4 color         : COLOR;
	float4 normal        : NORMAL;
	float4 tangent       : TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position      : SV_POSITION;
	float4 color         : COLOR;
	float2 uv            : TEXCOORD0;
	float3 normal        : TEXCOORD1;
	float4 screenPos	 : TEXCOORD2;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.screenPos = output.position;
	output.uv = input.uv;
	output.color = input.color;
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );
	return output;
}

/**
 *	pixelShader
 */
SamplerState DefaultSamplerState;
Texture2D colorTexture(scenecolor)				: register(t0);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t1);

Texture2D distortionTexture;
SamplerState SampleType;

float4 pixelShader( pixelInput input ) : SV_TARGET {

	float2 screenUV = input.screenPos.xy / input.screenPos.w;
	screenUV.y = -screenUV.y;
	screenUV = screenUV * 0.5f + 0.5f;

	//
	float4 distortionVec = distortionTexture.Sample( SampleType, screenUV * distortionParams.xy );
	distortionVec.xy = distortionParams.z * ( ( distortionVec.xy ) * 2.0f - 1.0f);

	const float pixelScreenDepth = depthTexture.Sample( DepthSamplerState, screenUV + distortionVec.xy ).r;
	const float clipCloserDepth = sign( saturate( pixelScreenDepth - ( input.screenPos.z / input.screenPos.w ) ) );
	distortionVec *= clipCloserDepth;

	const float3 finalEdgeFadeColor = edgeFadeColor.xyz * edgeFadeColor.w;
	float4 outColor = colorTexture.Sample( SampleType, screenUV + distortionVec.xy );

	float2 distFromEdge = min( input.uv, 1.0f - input.uv );
	distFromEdge = min( screenUV, 1.0f - screenUV );

	float lerpVal = edgeFadeParams.z * ( 1.0f - smoothstep( edgeFadeParams.y, edgeFadeParams.x , distFromEdge.x ) );
	lerpVal = lerpVal * 0.25f + 0.75f;
	outColor.xyz = lerp( outColor.xyz, finalEdgeFadeColor.xyz, lerpVal  );
	outColor.a = 1.0f;
	return outColor;
}
