//==============================================================================
// Particle_Rain.kbShader
//
// 2019 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix viewProjection;
	float4 cameraPos;
	float4 time;
	float4 colorMultplier;				// x: 1 is blend, 0 is add
	float4 rainParams;					// xy: Tile. z: Speed
	float4 rainColor;
};

kbShaderState {
	srcblend Blend_One
	dstBlend Blend_One
	blendOp BlendOp_Add
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position					: POSITION;
	float2 uv						: TEXCOORD0;
	float4 color					: COLOR;
	float2 size						: TEXCOORD1;
	float4 rotationAndDirection		: TEXCOORD2;
	float4 billboardType			: TEXCOORD3;
};

//-------------------------------------
struct pixelInput {
	float4 position					: SV_POSITION;
	float2 uv						: TEXCOORD0;
	float4 color					: COLOR;
	float2 position2				: TEXCOORD1;
	float3 normal					: TEXCOORD2;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color					: SV_TARGET0;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {

	pixelInput output = (pixelInput)(0);

	const float3 particleWorldPos = input.position.xyz;//mul( input.position, modelMatrix ).xyz;
	float3 localPos = float3( input.size.x , input.size.y, 0 );
	float3x3 billboardMatrix;
	{
		// Axial
		float3 heading = float3( 0, -1, 0 );
		const float3 xAxis = normalize( cross( normalize( cameraPos.xyz - particleWorldPos ), heading ) );
		const float3 yAxis = normalize( cross( heading, xAxis ) );
		billboardMatrix = float3x3( heading, xAxis, yAxis );
	}

	const float3 offset = mul( localPos, billboardMatrix );
	output.position = mul( float4(particleWorldPos,1) + float4( offset, 0.0f ), viewProjection );

	output.uv = input.uv.yx * rainParams.xy;

	const float scrollRate = rainParams.z + 2 * frac( particleWorldPos.x + particleWorldPos.z );
	output.uv.y -= ( ( particleWorldPos.x + particleWorldPos.z + time.x ) * scrollRate );//+ output.position.x + output.position.z;

	output.color = input.color * rainColor;

	output.position2 = output.position.zw;

	return output;
}

/**
 *	pixelShader
 */
Texture2D shaderTexture;
SamplerState SampleType;

 float4 pixelShader( pixelInput	input ) : SV_TARGET {
	float4 finalColor = shaderTexture.Sample( SampleType, input.uv );
	finalColor.xyz = input.color.xyz;
	finalColor.a *= input.color.a;
	finalColor.a = smoothstep( 0.0f, 1.0f, finalColor.a);
	return finalColor * finalColor.a;
}
