//===================================================================================================
// TVScreen.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix mvpMatrix;
	float4 lightAnimParam;		// lightAnimParam driven by EtherLightAnimatorComponent
};

kbShaderState {
	srcblend Blend_One
	colorWriteEnable ColorWriteEnable_rgba
	cullMode CullMode_None
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float4 normal			: NORMAL;
	float4 tangent			: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float2 position2		: TEXCOORD1;
	float3 normal			: TEXCOORD2;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color			: SV_TARGET0;
	float4 Normal			: SV_TARGET1;
	float4 Specular			: SV_TARGET2;
	float2 Depth			: SV_TARGET3;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.position2 = output.position.zw;
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );

	return output;
}

/**
 *	pixelShader
 */
Texture2D screenTexture			: register(t0);
SamplerState SampleType;

 float4 pixelShader( pixelInput	input ) : SV_TARGET {


//	float time = 1.0f - input.color.w;
	float2 uv = input.uv;

	float4 color = screenTexture.Sample( SampleType, uv ) * lerp( lightAnimParam, 1, 0.85f );
	color.w = 0.1;
	return color;
}
