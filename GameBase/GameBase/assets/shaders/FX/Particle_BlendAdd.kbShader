//==============================================================================
// Particle_BlendAdd.kbShader
//
// 2019 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix modelViewMatrix;
	matrix viewMatrix;
	matrix mvpMatrix;
	matrix projection;
	matrix inverseProjection;
	matrix viewProjection;
	float4 cameraPos;
	float4 colorMultplier;				// x: 1 is blend, 0 is add
};

kbShaderState {
	srcblend Blend_One
	dstBlend Blend_InvSrcAlpha
	blendOp BlendOp_Add
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position					: POSITION;
	float2 uv						: TEXCOORD0;
	float4 color					: COLOR;
	float2 size						: TEXCOORD1;
	float4 rotationAndDirection		: TEXCOORD2;
	float4 billboardType			: TEXCOORD3;
};

//-------------------------------------
struct pixelInput {
	float4 position               : SV_POSITION;
	float2 uv                     : TEXCOORD0;
	float4 color                  : COLOR;
	float2 position2              : TEXCOORD1;
	float3 normal                 : TEXCOORD2;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color                  : SV_TARGET0;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {

	pixelInput output = (pixelInput)(0);

	const float3 particleWorldPos = input.position.xyz;//mul( input.position, modelMatrix ).xyz;
	float3 localPos = float3( input.size.x , input.size.y, 0 );
	float3x3 billboardMatrix;
	if ( input.billboardType.x == 0 ) {
		// Billboard
		float3 up = float3( 0.0f, 1.0f, 0.0f );
		const float3 zAxis = normalize( cameraPos.xyz - particleWorldPos );
		const float3 xAxis = normalize( cross( up, zAxis ) );
		const float3 yAxis = normalize( cross( zAxis, xAxis ) );
		billboardMatrix = float3x3( xAxis, yAxis, zAxis );

		const float cosRot = cos( input.rotationAndDirection.w );
		const float sinRot = sin( input.rotationAndDirection.w );
		const float3 xRot = float3( cosRot, sinRot, 0.0f );
		const float3 yRot = float3( -sinRot, cosRot, 0.0f );
		const float3 zRot = float3( 0.0f, 0.0f, 1.0f );
		float3x3 rotationMatrix = float3x3( xRot, yRot, zRot );
		localPos = mul( localPos, rotationMatrix );

	} else {
	   // Axial
	   float3 heading = input.rotationAndDirection.xyz;
	   const float3 xAxis = normalize( cross( normalize( cameraPos.xyz - particleWorldPos ), heading ) );
	   const float3 yAxis = normalize( cross( heading, xAxis ) );
	   billboardMatrix = float3x3( heading, xAxis, yAxis );
	}

	const float3 offset = mul( localPos, billboardMatrix );
	output.position = mul( float4(particleWorldPos,1) + float4( offset, 0.0f ), viewProjection );

	output.uv = input.uv * 0.5f;
	uint atlasIdx = (int)( input.billboardType.w * 4.0f );
	if ( atlasIdx == 0 ) {
		output.uv += float2( 0.5f, 0.0f );
	} else if ( atlasIdx == 1 ) {
		output.uv += float2( 0.0f, 0.5f );
	} else if ( atlasIdx == 2 ) {
		output.uv += float2( 0.5f, 0.5f );
	}

	float alphaBlendFactor = 1.0f - input.color.a;//saturate( max( max( input.color.r, input.color.g ), input.color.b ) * 2.0f - 1.0f );
	output.color.rgb = input.color.rgb * input.color.a * lerp( 0, 2.0f, alphaBlendFactor );
	output.color.a = input.color.a * alphaBlendFactor;

	output.position2 = output.position.zw;

	return output;
}

/**
 *	pixelShader
 */
Texture2D shaderTexture;
SamplerState SampleType;

 float4 pixelShader( pixelInput	input ) : SV_TARGET {
	float4 finalColor = shaderTexture.Sample( SampleType, input.uv );
	finalColor *= input.color;

/*	if ( finalColor.a < 0.5f ) {
		 finalColor.a = saturate( finalColor.a * 2.0f );		// Alpha blended
		finalColor.xyz *= finalColor.a;
	} else {
		finalColor.xyz *= ( finalColor.a - 0.5f ) * 2.0f;
		finalColor.w = 1.0f;
	}
*/

	return finalColor;
}
