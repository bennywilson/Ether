//===================================================================================================
// decal_Modulate.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix mvpMatrix;
	matrix inverseViewProjection;
	matrix inverseModelMatrix;
	float4 decalParams1;			// x: floor tolerances
}

kbShaderState {
	//cullMode cullmode_frontfaces
	srcBlend Blend_DstColor
	dstBlend Blend_Zero
	blendOp BlendOp_Add
	colorWriteEnable colorwriteEnable_rgb
	/*srcBlendAlpha Blend_One
	dstBlendAlpha Blend_Zero
	blendOpAlpha BlendOp_Add*/
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float4 normal			: NORMAL;
	float4 tangent			: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float4 color			: COLOR;
	float2 uv				: TEXCOORD0;
	float3 normal			: TEXCOORD1;
	float4 screenPos		: TEXCOORD2;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.screenPos = output.position;
	output.uv = input.uv;
	output.color = input.color;
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );
	return output;
}

/**
 *	pixelShader
 */
SamplerState DefaultSamplerState;
Texture2D colorTexture(colorBuffer)				: register(t0);

SamplerState NormalSamplerState;
Texture2D normalTexture(normalBuffer)			: register(t1);

Texture2D specularTexture(specularBuffer)		: register(t2);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t3);

SamplerState ShadowMapSamplerState;
Texture2D ShadowMap(shadowBuffer)				: register(t4);

Texture2D ProjectionTex;

float4 pixelShader( pixelInput input ) : SV_TARGET {

	float4 screenCoord = input.screenPos / input.screenPos.w;
	float2 screenUV = screenCoord.xy * 0.5f + 0.5f;
	screenUV.y = 1.0f - screenUV.y;

	float4 diffuseColor = colorTexture.Sample( DefaultSamplerState, screenUV );
	float4 normal = normalTexture.Sample( NormalSamplerState, screenUV );
	float4 specColor = specularTexture.Sample( DefaultSamplerState, screenUV );
	
	normal.xyz = normalize( normal.xyz );
	if ( normal.y > decalParams1.x )
		clip(-1);


	float4 worldPos = float4( screenCoord.xy, depthTexture.Sample( DepthSamplerState, screenUV ).r, 1 );
	worldPos = mul( worldPos, inverseViewProjection );
	worldPos /= worldPos.w;

//	if ( length( worldPos.xyz - modelMatrix[3].xyz ) < 3)
	//	return 1;

	float4 localPos = mul( worldPos, inverseModelMatrix );
//	localPos.xy 
	//if ( length( localPos.yz - float2( 0.5f, 0.5f ) ) < 0.2f )
	//	return 1;
	float2 finalUV = localPos.zy;

	//finalUV /= 0.5;
	finalUV = finalUV * 0.5f + 0.5f;
	finalUV.y = 1.0f - finalUV.y;
	if ( finalUV.x < 0.1f || finalUV.x > 0.9f || finalUV.y < 0.1f || finalUV.y > 0.9f )
		clip(-1);

	return ProjectionTex.Sample( DefaultSamplerState, finalUV );
	//return 0;
}
