//===================================================================================================
// Antialiasing.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix				inverseViewProjection;
	float4				cameraPosition;
	float4				fog_Start_End_Clamp;
	float4				fogColor;
};

kbShaderState {
	srcBlend Blend_One
	dstBlend Blend_Zero
	colorwriteenable colorwriteenable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 position2		: TEXCOORD1;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.uv = input.uv;
	output.position2 = input.position;

	return output;
}

/**
 *	pixelShader
 */
SamplerState DiffuseSamplerState;
Texture2D colorTexture(sceneColor)				: register(t0);

SamplerState NormalSamplerState;
Texture2D normalTexture(normalBuffer)			: register(t1);

Texture2D specularTexture(specularBuffer)		: register(t2);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t3);

SamplerState ShadowMapSamplerState;
Texture2D ShadowMap(shadowBuffer)				: register(t4);

Texture2D NoiseTex(noise);
float4 pixelShader( pixelInput input ) : SV_TARGET {

	float multiplier = 1.5f;
	float2 pixelSize = float2( 1.0f / 1920.0f, 1.0f / 1080.0f ) * multiplier;
	float depth1 = depthTexture.Sample( DepthSamplerState, input.uv + float2( -pixelSize.x, pixelSize.y ) ).r;
	float depth2 = depthTexture.Sample( DepthSamplerState, input.uv + float2( pixelSize.x, pixelSize.y ) ).r;
	float depth3 = depthTexture.Sample( DepthSamplerState, input.uv + float2( pixelSize.x, -pixelSize.y ) ).r;
	float depth4 = depthTexture.Sample( DepthSamplerState, input.uv + float2( -pixelSize.x, -pixelSize.y ) ).r;

	float4 sceneColor = colorTexture.Sample( DiffuseSamplerState, input.uv );
		float3 sceneColor1 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( -pixelSize.x, pixelSize.y ) ).xyz;
		float3 sceneColor2 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( pixelSize.x, pixelSize.y ) ).xyz;
		float3 sceneColor3 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( pixelSize.x, -pixelSize.y ) ).xyz;
		float3 sceneColor4 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( -pixelSize.x, -pixelSize.y ) ).xyz;

	/*	float3 sceneColor5 = sceneColor.xyz;//colorTexture.Sample( DiffuseSamplerState, input.uv + float2( -pixelSize.x, 0 ) ).xyz;
		float3 sceneColor6 = sceneColor.xyz;//colorTexture.Sample( DiffuseSamplerState, input.uv + float2( pixelSize.x, 0) ).xyz;
		float3 sceneColor7 = sceneColor.xyz;//colorTexture.Sample( DiffuseSamplerState, input.uv + float2( 0, -pixelSize.y ) ).xyz;
		float3 sceneColor8 = sceneColor.xyz;//colorTexture.Sample( DiffuseSamplerState, input.uv + float2( 0, -pixelSize.y ) ).xyz;*/
	
		float3 sceneColor5 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( -pixelSize.x, 0 ) ).xyz;
		float3 sceneColor6 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( pixelSize.x, 0) ).xyz;
		float3 sceneColor7 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( 0, -pixelSize.y ) ).xyz;
		float3 sceneColor8 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( 0, -pixelSize.y ) ).xyz;

	float zDepth = 0.03f;
	if ( /*abs( depth1 - depth2 ) > zDepth || abs( depth1 - depth3 ) > zDepth || abs( depth1 - depth4 ) > zDepth || 
		 abs( depth2 - depth3 ) > zDepth || abs( depth2 - depth4 ) > zDepth ||
		abs( depth3 - depth4 ) > zDepth ||*/
			length( sceneColor1.xyz ) == 0 ||
			length( sceneColor2.xyz ) == 0 ||
			length( sceneColor3.xyz ) == 0 ||
			length( sceneColor4.xyz ) == 0 ||
			length( sceneColor5.xyz ) == 0 ||
			length( sceneColor6.xyz ) == 0 ||
			length( sceneColor7.xyz ) == 0 ||
			length( sceneColor8.xyz ) == 0 ) {
		
		pixelSize = float2( 1.0f / 1920.0f, 1.0f / 1080.0f ) * multiplier;
		float3 sceneColor1 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( -pixelSize.x, pixelSize.y ) ).xyz;
		float3 sceneColor2 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( pixelSize.x, pixelSize.y ) ).xyz;
		float3 sceneColor3 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( pixelSize.x, -pixelSize.y ) ).xyz;
		float3 sceneColor4 = colorTexture.Sample( DiffuseSamplerState, input.uv + float2( -pixelSize.x, -pixelSize.y ) ).xyz;
		sceneColor.xyz = ( sceneColor.xyz + sceneColor1 + sceneColor2 + sceneColor3 + sceneColor4 + sceneColor5 + sceneColor6 + sceneColor7 + sceneColor8 ) / 9;
	}
	

	return sceneColor;
}
