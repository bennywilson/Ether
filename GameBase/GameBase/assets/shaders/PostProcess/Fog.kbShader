//===================================================================================================
// Fog.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix				inverseViewProjection;
	float4				cameraPosition;
	float4				fog_Start_End_Clamp;
	float4				fogColor;
};

kbShaderState {
	srcBlend Blend_One
	dstBlend Blend_Zero
	colorwriteenable colorwriteenable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 position2		: TEXCOORD1;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = input.position;
	output.uv = input.uv;
	output.position2 = input.position;

	return output;
}

/**
 *	pixelShader
 */
SamplerState DiffuseSamplerState;
Texture2D colorTexture(sceneColor)				: register(t0);

SamplerState NormalSamplerState;
Texture2D normalTexture(normalBuffer)			: register(t1);

Texture2D specularTexture(specularBuffer)		: register(t2);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t3);

SamplerState ShadowMapSamplerState;
Texture2D ShadowMap(shadowBuffer)				: register(t4);

Texture2D NoiseTex(noise);
float4 pixelShader( pixelInput input ) : SV_TARGET {

	float4 worldPosition = float4( input.position2.xy, depthTexture.Sample( DepthSamplerState, input.uv ).r, 1 );
	worldPosition = mul( worldPosition, inverseViewProjection );
	worldPosition /= worldPosition.w;

	float4 sceneColor = colorTexture.Sample( DiffuseSamplerState, input.uv );
	float fog = 0;
	float z = length( worldPosition.xyz - cameraPosition.xyz );

	fog = ( fog_Start_End_Clamp.y - z ) / ( fog_Start_End_Clamp.y - fog_Start_End_Clamp.x );
	fog = 1.0f - saturate(fog);
	//fog = clamp( fog, 0.0f, fog_Start_End_Clamp.z );
fog *= fog_Start_End_Clamp.z;
	sceneColor.xyz = lerp( sceneColor.xyz, fogColor.xyz, fog );
	return sceneColor;
}
