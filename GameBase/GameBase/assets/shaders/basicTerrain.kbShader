//==============================================================================
// basicTerrain.kbShader
//
// 2018 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix mvpMatrix;
	float4 mat1And2UVScale;
	float4 mat3And4UVScale;
	float4 specFactors;
};

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 binormal			: COLOR;
	float4 normal			: NORMAL;
	float4 tangent			: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float2 position2		: TEXCOORD1;
	float3 tangent			: TEXCOORD2;
	float3 binormal			: TEXCOORD3;
	float3 normal			: TEXCOORD4;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color			: SV_TARGET0;
	float4 Normal			: SV_TARGET1;
	float4 Spec				: SV_TARGET2;
	float2 Depth			: SV_TARGET3;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.position2 = output.position.zw;


	output.tangent = ( input.tangent.xyz * 2.0f ) - 1.0f;
	output.binormal = ( input.binormal.xyz * 2.0f ) - 1.0f;
	output.normal = ( input.normal.xyz * 2.0f ) - 1.0f;

	return output;
}

/**
 *	pixelShader
 */ 
SamplerState SampleType;

Texture2D splatMap		: register(t0);

Texture2D Mat1Diffuse	: register(t1);
Texture2D Mat1Normal	: register(t2);
Texture2D Mat1Specular	: register(t3);

Texture2D Mat2Diffuse	: register(t4);
Texture2D Mat2Normal	: register(t5);
Texture2D Mat2Specular	: register(t6);

Texture2D Mat3Diffuse	: register(t7);
Texture2D Mat3Normal	: register(t8);
Texture2D Mat3Specular	: register(t9);

Texture2D Mat4Diffuse	: register(t10);

 PS_OUTPUT pixelShader( pixelInput	input )  {
 	PS_OUTPUT output = (PS_OUTPUT) 0;

	float3x3 tbn;
	tbn[0] = input.tangent.xyz;
	tbn[1] = input.binormal.xyz;
	tbn[2] = input.normal.xyz;

	const half zMult = 1;
	const float3 mat1Color = Mat1Diffuse.Sample( SampleType, input.uv * mat1And2UVScale.xy ).xyz;
	float3 mat1Normal = Mat1Normal.Sample( SampleType, input.uv * mat1And2UVScale.xy ).xyz;
	float3 mat1Spec = Mat1Specular.Sample( SampleType, input.uv * mat1And2UVScale.xy ).xyz * specFactors.x;

	mat1Normal = ( mat1Normal * 2.0f ) - 1.0f;
	mat1Normal = mul( mat1Normal, tbn );
	mat1Normal.y *= zMult;

	const float3 mat2Color = Mat2Diffuse.Sample( SampleType, input.uv * mat1And2UVScale.zw ).xyz;
	float3 mat2Normal = Mat2Normal.Sample( SampleType, input.uv * mat1And2UVScale.zw ).xyz;
	float3 mat2Spec = Mat2Specular.Sample( SampleType, input.uv * mat1And2UVScale.zw ).xyz * specFactors.y;

	mat2Normal = ( mat2Normal * 2.0f ) - 1.0f;
	mat2Normal = mul( mat2Normal, tbn );
	mat2Normal.y *= zMult;

	const half3 mat3Color = Mat3Diffuse.Sample( SampleType, input.uv * mat3And4UVScale.xy ).xyz;
	half3 mat3Normal = Mat3Normal.Sample( SampleType, input.uv * mat3And4UVScale.xy ).xyz;
	half3 mat3Spec = Mat3Specular.Sample( SampleType, input.uv * mat3And4UVScale.xy ).xyz * specFactors.z;

	mat3Normal = ( mat3Normal * 2.0f ) - 1.0f;
	mat3Normal = mul( mat3Normal, tbn );
	mat3Normal.y *= zMult;

	half4 splat = splatMap.Sample( SampleType, input.uv );

	output.Color.xyz = ( mat1Color * splat.x ) + ( mat2Color * splat.y ) + ( mat3Color * splat.z );
	output.Normal.xyz = normalize( ( mat1Normal * splat.x ) + ( mat2Normal * splat.y ) + ( mat3Normal * splat.z ) );
	output.Spec.xyz = ( ( mat1Spec * splat.x )  + ( mat2Spec * splat.y ) + ( mat3Spec * splat.z ) ) / 3.0f;
	output.Depth.r = input.position2.x / input.position2.y;

	/*output.Color.xyz = mat2Color;
	output.Normal.xyz = mat2Normal;
	output.Spec.xyz = mat2Spec;
	output.Depth.r = input.position2.x / input.position2.y;
	*/
	return output;
}
