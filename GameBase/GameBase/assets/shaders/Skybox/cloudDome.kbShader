//==============================================================================
// cloudDome.kbShader
//
// 2019	 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix mvpMatrix;
	matrix modelMatrix;
	matrix viewProjection;
	float4 cameraPos;
	float4 time;
};

//-------------------------------------
struct vertexInput {
   float4 position   : POSITION;
   float2 uv         : TEXCOORD0;
   float4 color      : COLOR;
   float4 normal     : NORMAL;
   float4 tangent    : TANGENT;
};

//-------------------------------------
struct pixelInput {
   float4 position   : SV_POSITION;
   float2 uv         : TEXCOORD0;
   float4 color      : COLOR;
   float4 position2  : TEXCOORD1;
   float3 normal     : TEXCOORD2;
};

kbShaderState {
	cullMode CullMode_None
	srcblend Blend_One
	dstBlend Blend_One
}

//-------------------------------------
struct PS_OUTPUT {
	float4 Color		: SV_TARGET0;
	float2 Depth		: SV_TARGET1;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, modelMatrix );
	output.position += float4(cameraPos.xyz, 0);
	output.position = mul( output.position, viewProjection);
	output.position.z = output.position.w - 0.0001f;

	output.uv = input.uv;
	output.color = input.color;
	output.position2 = output.position;
//	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, modelMatrix );

	return output;
}


Texture2D diffuseTexture;
SamplerState LinearSampler;

/**
 *	pixelShader
 */
 PS_OUTPUT pixelShader( pixelInput	input ) {
 	PS_OUTPUT output = (PS_OUTPUT) 0;

	output.Color = 0.5f * diffuseTexture.Sample( LinearSampler, input.uv + float2( time.x * 0.01f, 0.0f ) );
	clip ( output.Color.w - 0.00001f );

	output.Depth.r = input.position2.z / input.position2.w;// / input.position2.y;
	return output;
}
