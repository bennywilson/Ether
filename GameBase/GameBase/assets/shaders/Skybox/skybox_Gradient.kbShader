//==============================================================================
// skybox_Gradient.kbShader
//
// 2019	kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix mvpMatrix;
	matrix modelMatrix;
	matrix viewProjection;
	float4 cameraPos;
	float4 time;
	float4 horizonColor;
	float4 skyColor;
};

//-------------------------------------
struct vertexInput {
	float4 position   : POSITION;
	float2 uv         : TEXCOORD0;
	float4 color      : COLOR;
	float4 normal     : NORMAL;
	float4 tangent    : TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position		: SV_POSITION;
	float2 uv			: TEXCOORD0;
	float4 color		: COLOR;
	float4 position2	: TEXCOORD1;
	float3 normal		: TEXCOORD2;
	float3 worldPos		: TEXCOORD3;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, modelMatrix );
	output.worldPos.xyz = cameraPos.xyz + output.position.xyz * 999;
	output.position += float4(cameraPos.xyz, 0);
	output.position = mul( output.position, viewProjection);
	output.position.z = output.position.w - 0.0001f;

	output.uv = input.uv;
	output.color = input.color;
	output.position2 = output.position;
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );

	return output;
}


Texture2D diffuseTexture;
SamplerState LinearSampler;

/**
 *	pixelShader
 */
 float4 pixelShader( pixelInput input ) : SV_TARGET0 {
 	float4 outColor = 0;

	float2 uv = input.uv;

	outColor.xyz = lerp( horizonColor.xyz, skyColor.xyz, uv.y );

	return outColor;
}
