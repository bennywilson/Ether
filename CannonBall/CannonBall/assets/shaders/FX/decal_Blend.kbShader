//===================================================================================================
// decal_Blend.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix mvpMatrix;
	matrix inverseViewProjection;
	matrix inverseModelMatrix;
	float4 cameraPosition;
	float4 colorMultiplier = (1,1,1,1);
	float4 clipData;		// x - clip bias, y - uv border clip, 
}

kbShaderState {
	srcBlend Blend_SrcAlpha
	dstBlend Blend_InvSrcAlpha
	blendOp BlendOp_Add

	srcBlendAlpha Blend_One
	dstBlendAlpha Blend_Zero
	blendOpAlpha BlendOp_Add
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float4 normal			: NORMAL;
	float4 tangent			: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float4 color			: COLOR;
	float2 uv				: TEXCOORD0;
	float3 normal			: TEXCOORD1;
	float4 screenPos		: TEXCOORD2;
	float3 worldDir			: TEXCOORD3;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.screenPos = output.position;
	output.uv = input.uv;
	output.color = input.color;
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );
	output.worldDir = mul( input.position, modelMatrix ).xyz - cameraPosition.xyz;
	return output;
}

/**
 *	pixelShader
 */
SamplerState DefaultSamplerState;
Texture2D colorTexture(colorBuffer)				: register(t0);

SamplerState NormalSamplerState;
Texture2D normalTexture(normalBuffer)			: register(t1);

Texture2D specularTexture(specularBuffer)		: register(t2);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t3);

Texture2D ProjectionTex;

float4 pixelShader( pixelInput input ) : SV_TARGET {

	float4 screenCoord = input.screenPos / input.screenPos.w;
	float2 screenUV = screenCoord.xy * 0.5f + 0.5f;
	screenUV.y = 1.0f - screenUV.y;

	float4 normal = normalTexture.Sample( NormalSamplerState, screenUV );
	clip( normal.w - clipData.x );

	float4 worldPos = float4( screenCoord.xy, depthTexture.Sample( DepthSamplerState, screenUV ).r, 1 );
	worldPos = mul( worldPos, inverseViewProjection );
	worldPos /= worldPos.w;


	float4 localPos = mul( worldPos, inverseModelMatrix );
	float2 finalUV = localPos.zy;

	finalUV = finalUV * 0.5f + 0.5f;
	finalUV.y = 1.0f - finalUV.y;
	if ( finalUV.x < 0.01f || finalUV.x > 0.99f || finalUV.y < 0.01f || finalUV.y > 0.99f )
		clip(-1);

	return ProjectionTex.Sample( DefaultSamplerState, finalUV ) * colorMultiplier;
}
