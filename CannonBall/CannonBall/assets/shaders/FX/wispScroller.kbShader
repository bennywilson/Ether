//===================================================================================================
// wispScroller.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix mvpMatrix;
	float4 uvOffset;
	float4 uvTileSpeed = (20.0,1.0,-2.0,0.0);
	float4 colorMultiplier = (1.0,1.0,1.0,2.0f);
	float4 noiseScaleAndBias = (0.25,1.0,0.0,0.0);
	float4 noiseFadeParams = (1.0,0.5,0.8,0.0);			// x - Noise Fade Scale, y - Smooth Step Min, z - Smooth Step Max
	float4 uvFadeParams = (0.1,0.5,0.0,0.0);				// xy - UV fade distance
	float4 particleColor;
};

kbShaderState {
	srcblend Blend_SrcAlpha
	dstBlend Blend_InvSrcAlpha
	blendOp BlendOp_Add
	colorWriteEnable ColorWriteEnable_rgb
	cullMode CullMode_None
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float4 normal			: NORMAL;
	float4 tangent			: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float2 position2		: TEXCOORD1;
	float3 normal			: TEXCOORD2;
};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color			: SV_TARGET0;
	float4 Normal			: SV_TARGET1;
	float4 Specular			: SV_TARGET2;
	float2 Depth			: SV_TARGET3;
};


/// vertexShader
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.color = particleColor;
	output.position2 = output.position.zw;
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );

	return output;
}

/// pixelShader
Texture2D shaderTexture			: register(t0);
SamplerState SampleType;

Texture2D noiseTexture(white)			: register(t1);

 float4 pixelShader( pixelInput	input ) : SV_TARGET {

	float time = saturate( 1.0f - input.color.w );
	float2 uv = ( input.uv * uvTileSpeed.xy ) + time * uvTileSpeed.zw;

	const float4 tex = shaderTexture.Sample( SampleType, uv );
	const float4 noise = noiseTexture.Sample( SampleType, uv * noiseScaleAndBias.xy + noiseScaleAndBias.zw );

	float4 color = tex;
	color.xyz *= color.xyz;

	// Apply noise fade
	color.w -= ( noise.r * noiseFadeParams.x );
	color.w = smoothstep( noiseFadeParams.y, noiseFadeParams.z, color.w );

	// Fade uv edges
	float2 edgeAlpha = min( input.uv, 1.0f - input.uv );
	if ( uvFadeParams.x == 0 ) {
		edgeAlpha.x = 1.0f;
	} else {
		edgeAlpha.x = edgeAlpha.x / uvFadeParams.x;
	}

	if ( uvFadeParams.y == 0 ) {
		edgeAlpha.y = 1.0f;
	} else {
		edgeAlpha.y = edgeAlpha.y / uvFadeParams.y;
	}

	float timeFade = saturate( min( time, 1.0f - time  ) / 0.25f );

	color.w *= saturate( min( edgeAlpha.y, edgeAlpha.x ) ) * timeFade;
	return saturate( color * colorMultiplier );
}
	