//===================================================================================================
// ui_additive.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	float4					normalizedScreenSize_Anchor;
	float4					colorFactor;
	float4					rotationAngle;
	float4					additiveTextureParams;
};

kbShaderState {
	srcBlend				Blend_One
	dstBlend				Blend_One
	colorwriteenable		colorwriteenable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 position2		: TEXCOORD1;
};

/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	float4 position = input.position;

	const float cosAngle = cos( rotationAngle.x );
	const float sinAngle = sin( rotationAngle.x );

	const float2 rotation0 = float2( cosAngle, -sinAngle );
	const float2 rotation1 = float2( sinAngle, cosAngle );
	output.position.x = dot( position.xy, rotation0 );
	output.position.y = dot( position.xy, rotation1 );
	output.position.zw = position.zw;

	output.position.xy *= normalizedScreenSize_Anchor.xy;

	// Move to the anchor point
	float2 offset = normalizedScreenSize_Anchor.zw * 2.0f - 1.0f;
	offset.y *= -1.0f;
	output.position.xy += offset;

	output.uv = input.uv;
	output.position2 = input.position;

	return output;
}

/**
 *	pixelShader
 */
SamplerState DiffuseSamplerState;

Texture2D baseTexture(white)					: register(t0);

Texture2D additiveTexture(black)				: register(t1);

float4 pixelShader( pixelInput input ) : SV_TARGET {

	float4 additiveColor = additiveTexture.Sample( DiffuseSamplerState, input.uv ) * additiveTextureParams.x;
	float4 baseColor = baseTexture.Sample( DiffuseSamplerState, input.uv );
	return ( baseColor + additiveColor ) * colorFactor;
}

