//===================================================================================================
// water_skygradientreflection.kbShader
//
//
// 2019 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix mvpMatrix;
	matrix inverseViewProjection;
	float4 cameraPosition;
	float4 horizonColor;
	float4 skyColor;
	float4 waterScaleAndSpeed_1;
	float4 waterScaleAndSpeed_2;
	float4 time;
	float4 lightShaftsDir;
	float4 lightShaftsColor;
	float4 spec_Factor_Power;
	float4 normalStrengths;
	float4 sunColorFactor;
	float4 reflectedObjectColorFactor;
	float4 reflectionNormalFactor;
	float4 globalSunFactor = (1,1,1,1);
};

kbShaderState {
	srcblend Blend_SrcAlpha
	dstBlend Blend_InvSrcAlpha
	blendOp BlendOp_Add
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float4 normal			: NORMAL;
	float4 tangent			: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float3 worldPosition	: TEXCOORD1;
	float3 normal			: TEXCOORD2;
	float4 screenPos		: TEXCOORD3;

};

//-------------------------------------
struct PS_OUTPUT {
	float4 Color			: SV_TARGET0;
	float4 Normal			: SV_TARGET1;
	float4 Specular			: SV_TARGET2;
	float2 Depth			: SV_TARGET3;
};


/// vertexShader
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.position = mul( input.position, mvpMatrix );
	output.screenPos = output.position;
	output.uv = input.uv;
	output.color = input.color;
	output.worldPosition.xyz = mul( input.position, modelMatrix ).xyz;
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );

	return output;
}

/// pixelShader
SamplerState DiffuseSamplerState;
Texture2D normalMap1					: register(t0);

SamplerState NormalSamplerState;
Texture2D normalMap2					: register(t1);

Texture2D colorTexture(colorBuffer)		: register(t2);

Texture2D screenNormal(normalBuffer)	: register(t3);

Texture2D depthTexture(depthBuffer)		: register(t4);

float4 pixelShader( pixelInput	input ) : SV_TARGET {
	PS_OUTPUT output = (PS_OUTPUT) 0;

	const float3 pointToEye = normalize( cameraPosition.xyz - input.worldPosition.xyz );
	float3 normal = float3( 0.0f, 1.0f, 0.0f );
	float3 nm1 = normalMap2.Sample( NormalSamplerState, ( input.uv * waterScaleAndSpeed_1.xy ) + waterScaleAndSpeed_1.zw * time.xx ).xyz;
	nm1 = ( nm1 * 2.0f ) - 1.0f;
	normal.xz += nm1.xz * normalStrengths.xy;

	float3 nm2 = normalMap2.Sample( NormalSamplerState, ( input.uv * waterScaleAndSpeed_2.xy ) + waterScaleAndSpeed_2.zw * time.xx ).xyz;
	nm2 = ( nm2 * 2.0f ) - 1.0f;
	normal.xz += nm2.xz * normalStrengths.zw;
	//normal.y = 1.0f;
	normal = normalize( normal );
	const float3 reflectVec = 2 * dot( pointToEye, normal ) * normal - pointToEye;
	float3 color = lerp( horizonColor.xyz * horizonColor.w, skyColor.xyz * skyColor.w, abs( reflectVec.y ) );

	//color = 
	//0.5f * ( color + reflectColor.xyz );
	float3 sunDir = lightShaftsDir.xyz;
	float spec = saturate( dot ( sunDir.xyz, reflectVec ) );
	spec = pow( spec, spec_Factor_Power.y );
	color += spec * spec_Factor_Power.x * lightShaftsColor.xyz * sunColorFactor.xyz * globalSunFactor.xyz;

	// Reflection
	float2 screenUV = ( ( input.screenPos / input.screenPos.w ) * 0.5f + 0.5f ).xy;
	screenUV.y *= -1.0f;

	float4 reflectColor = colorTexture.Sample( NormalSamplerState, screenUV);// + normal.xz * reflectionNormalFactor.xy );
	reflectColor.xyz *= reflectedObjectColorFactor.xyz * reflectedObjectColorFactor.w;
	reflectColor.w = 1.0f;
	
	float lerpVal = 0.0f;
	{
		float4 screenCoord = input.screenPos / input.screenPos.w;
		float2 screenUV = screenCoord.xy * 0.5f + 0.5f;
		screenUV.y = 1.0f - screenUV.y;
		float depth = depthTexture.Sample( NormalSamplerState, screenUV ).r;
		if ( depth < 0.9999f) lerpVal = 0.25f;
	}
	
	color = lerp( color, reflectColor.xyz, lerpVal );
	return float4( color, 1 );
}
