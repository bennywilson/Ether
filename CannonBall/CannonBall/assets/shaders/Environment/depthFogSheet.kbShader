//===================================================================================================
// depthFogSheet.kbShader
//
//
// 2020 kbEngine 2.0
//===================================================================================================
cbuffer matrixBuffer {
	matrix modelMatrix;
	matrix mvpMatrix;
	matrix inverseViewProjection;
	float4 cameraPosition;
	float4 time;

	float4 noise1Color = (1,1,1,0);							// xyz - color, w - min step
	float4 noise2Color = (1,1,1,0);							// xyz - color, w - min step
	float4 noiseScroll = (1,1,-1,-1);
	float4 noiseTile = (1,1,1,1);
	float4 smoothStepsAndAlphaPower = (0.5,0.5,1.0,0.0);	// x - Noise 1 min smooth step, y - Noise 2 min smooth step, z - Alpha power

	float4 fadeParams;										// x - fade dist, y - rand seed, z - clip plane height, w - clip plane fade distance
	float4 shapeMaskParams = (1.3,1,1,1);					// x - shape mask power, y - additive mask factor, z - additive mask power
	float4 shapeMaskTile = (1,1,1,1);
	float4 globalFogColor = (1,1,1,1);						//
};

kbShaderState {
	srcBlend Blend_SrcAlpha
	dstBlend Blend_InvSrcAlpha
	blendOp BlendOp_Add

	cullMode CullMode_None
	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 normal			: NORMAL;
	float4 tangent			: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4 position			: SV_POSITION;
	float2 uv				: TEXCOORD0;
	float4 color			: COLOR;
	float4 position2		: TEXCOORD1;
	float3 normal			: TEXCOORD2;
	float4 worldPos			: TEXCOORD3;
};


/// vertexShader
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	output.worldPos = mul( input.position, modelMatrix );
	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.position2 = output.position;
	output.normal.xyz = mul( ( input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );

	return output;
}

/// pixelShader
SamplerState DefaultSamplerState;
Texture2D colorTexture(colorBuffer)				: register(t0);

SamplerState NormalSamplerState;
Texture2D normalTexture(normalBuffer)			: register(t1);

Texture2D specularTexture(specularBuffer)		: register(t2);

SamplerState DepthSamplerState;
Texture2D depthTexture(depthBuffer)				: register(t3);

Texture2D noiseTexture1 : register(t4);
Texture2D noiseTexture2 : register(t5);
Texture2D shapeMaskTexture(white) : register(T6);

float4 pixelShader( pixelInput input ) : SV_Target {

	float4 screenCoord = input.position2 / input.position2.w;
	float2 screenUV = screenCoord.xy * 0.5f + 0.5f;
	screenUV.y = 1.0f - screenUV.y;

	float4 worldPos = float4( screenCoord.xy, depthTexture.Sample( DepthSamplerState, screenUV ).r, 1 );
	worldPos = mul( worldPos, inverseViewProjection );
	worldPos /= worldPos.w;
	
	// Soft fade against depth buffer
	float fadeDist = length( worldPos - input.worldPos );
	fadeDist = saturate( fadeDist / fadeParams.x );

	// Floor Fade
	float floorFade = length( input.worldPos.y - fadeParams.z ) / fadeParams.w;
	fadeDist = min( floorFade, fadeDist );

	float3 globalMult = float3( 1.0f, 0.75f, 0.5f ) * 0.75f;
	// Noise
	const float randTime = time.x + fadeParams.y;
	float3 noise1 = noiseTexture1.Sample( DefaultSamplerState, ( input.uv * noiseTile.xy ) + float2( noiseScroll.x, noiseScroll.y ) * randTime.x ).xyz;
	noise1 = smoothstep( smoothStepsAndAlphaPower.x, 1.0f, noise1.x ) * noise1Color.xyz * globalMult * noise1Color.w;

	float3 noise2 = noiseTexture1.Sample( DefaultSamplerState, ( input.uv.yx * noiseTile.wz ) + float2( noiseScroll.w, noiseScroll.z ) * randTime.x ).xyz;
	noise2 = smoothstep( smoothStepsAndAlphaPower.y, 1.0f, noise2.x ) * noise2Color.xyz * globalMult * noise2Color.w;

	// Fresnel fade
	const float3 vecToCamera = normalize( cameraPosition.xyz - input.worldPos.xyz );
	const float3 normal = normalize( -input.normal.xyz );
	const float fresnelFade = pow( saturate( -dot( vecToCamera, normal ) ), 1.5 );

	// Shape Mask
	const float4 shapeMask = shapeMaskTexture.Sample( DefaultSamplerState, input.uv * shapeMaskTile.xy );
	const float3 additiveMask = pow( abs( shapeMask.ggg ), abs( shapeMaskParams.z ) ) * shapeMaskParams.w;

	// Output
	const float3 outColor = ( ( noise1 + noise2 ).xyz + additiveMask.xyz ) * fadeDist;
	const float luminance = /*fresnelFade.x */ pow( abs( dot( outColor, float3( 0.3f, 0.69f, 0.11f ) ) ), abs( smoothStepsAndAlphaPower.z ) )* pow( abs( shapeMask.r * shapeMaskParams.y ), shapeMaskParams.x );

	return float4( outColor * globalFogColor.xyz, luminance );
}
