//==============================================================================
// characterOutline_NoSkinning.kbShader
//
// 2019 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix      modelMatrix;
	matrix		vpMatrix;
	matrix      mvpMatrix;
	float4		cameraPos;
	float4		outlineParams;
};

kbShaderState {
	cullMode CullMode_None
	//srcblend Blend_SrcAlpha
	//dstBlend Blend_InvSrcAlpha
	//blendOp BlendOp_Add
//	colorWriteEnable ColorWriteEnable_rgb
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 normal			: NORMAL;
};

//-------------------------------------
struct pixelInput {
	float4      position	: SV_POSITION;
	float2      uv			: TEXCOORD0;
	float2      position2	: TEXCOORD1;
	float3      normal		: TEXCOORD2;
	float3		worldPos	: TEXCOORD3;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	float4 Pos = input.position;
	float3 objCenter = float3(  modelMatrix[3].xyz );
	float distFromCam = length( cameraPos.xyz  - objCenter );

	float3 normal = (input.normal.xyz * 2.0f ) - 1.0f;
	Pos.xyz += normal * outlineParams.x;//0.02f;

	output.position = mul( Pos, modelMatrix );

	
	float3 fromCam = normalize( cameraPos.xyz  - output.position.xyz  );//output.position.xyz );
	output.position.xyz -= fromCam * outlineParams.y;//5;
	output.worldPos = output.position.xyz;
	output.position = mul( output.position, vpMatrix );

	output.uv = input.uv;
	//output.color = 0;//input.color;
	output.position2 = output.position.zw;
	output.normal.xyz = mul(  (input.normal.xyz * 2.0f ) - 1.0f, (float3x3)modelMatrix );

	return output;
}

/**
 *	pixelShader
 */
Texture2D colorTexture		: register(t0);
SamplerState SampleType;

 struct PS_OUTPUT {
	float4      Color		: SV_TARGET0;
	float4      Normal		: SV_TARGET1;
	float4		Specular	: SV_TARGET2;
	float2      Depth		: SV_TARGET3;
};

PS_OUTPUT pixelShader( pixelInput input ) {
	PS_OUTPUT output = (PS_OUTPUT) 0;

	int level = 1;
	float4 startColor = colorTexture.Sample( SampleType, input.uv );
	if ( dot( startColor.xyz, startColor.xyz ) < 0.1f )
		level = 1;

	const float4 colorTex = colorTexture.SampleLevel( SampleType, input.uv, level ) * outlineParams.z;//0.75f;// * 0.5f;
	output.Color.xyz = colorTex.xyz;
	output.Color.w = 0;//colorTex.w *A 0.55;
output.Color.w = -1.0f;
	output.Specular = float4( 0.0f, 1.0f, 0.0f, 0.0f );
	output.Depth.r = input.position2.x / input.position2.y;

	output.Normal.xyz = normalize( input.normal );


	return output;
}