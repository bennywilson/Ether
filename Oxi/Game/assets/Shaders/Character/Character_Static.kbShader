//==============================================================================
// Character_Static.kbShader
//
// 2020 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix		modelMatrix;
	matrix		mvpMatrix;

	// Hatching
	float4		hatchParams = (0,0,0,0);
	float4		sunDir;
};

kbShaderState {
	cullMode CullMode_BackFaces
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 normal			: NORMAL;
	float4 tangent			: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4      position	: SV_POSITION;
	float2      uv			: TEXCOORD0;
	float2      position2	: TEXCOORD1;
	float3      normal		: TEXCOORD2;
	float3		localPos	: TEXCOORD3;
	float3		localNormal	: TEXCOORD4;
};

struct pixelInput2 {
	float4      position	: SV_POSITION;
	float2      uv			: TEXCOORD0;
	float2      position2	: TEXCOORD1;
	float3      normal		: TEXCOORD2;
	float3		localPos	: TEXCOORD3;
	float3		localNormal	: TEXCOORD4;
	bool		IsFrontFace	: SV_IsFrontFace;
};
//-------------------------------------
struct PS_OUTPUT {
	float4      Color		: SV_TARGET0;
	float4      Normal		: SV_TARGET1;
	float4		Specular	: SV_TARGET2;
	float2      Depth		: SV_TARGET3;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	float4 Pos = 0.0f;


	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.position2 = output.position.zw;
	float3 normal = ( input.normal.xyz * 2.0f ) - 1.0f;
	output.normal.xyz = normalize( mul( normal, (float3x3)modelMatrix ) );

	output.localPos = input.position.xyz;
	output.localNormal = (input.normal.xyz * 2.0f ) - 1.0f;

	return output;
}

/**
 *	pixelShader
 */
Texture2D colorTexture;
SamplerState SampleType;

Texture2D hatchTexture1;
Texture2D hatchTexture2;


float3 Hatching(float2 _uv, half _intensity)
{

	_intensity = 1.0f - _intensity;
	_intensity = _intensity * 0.6f + 0.4f;

    half3 hatch0 = hatchTexture1.Sample( SampleType, _uv ).rgb;
    half3 hatch1 = hatchTexture2.Sample( SampleType, _uv ).rgb;

	if ( _intensity == 0 ) return hatch0.x;

	hatch0 = ( hatch0 * 0.9f ) + 0.1f;
	hatch1 = ( hatch1 * 0.9f ) + 0.1f;

    half3 overbright = max(0, _intensity - 1.0);

    half3 weightsA = saturate((_intensity * 6.0) + half3(-0, -1, -2));
    half3 weightsB = saturate((_intensity * 6.0) + half3(-3, -4, -5));

    weightsA.xy -= weightsA.yz;
    weightsA.z -= weightsB.x;
    weightsB.xy -= weightsB.zy;

    hatch0 = hatch0 * weightsA;
    hatch1 = hatch1 * weightsB;

    half3 hatching = overbright + hatch0.r +
    	hatch0.g + hatch0.b +
    	hatch1.r + hatch1.g +
    	hatch1.b;

hatching = hatching * (1.0f - hatchParams.w) + hatchParams.w;//+ 0.3f;
//hatching = 1.0f - hatching;

//hatching = pow( abs(hatching), abs(1.f));
//hatching = 1.0f - hatching;
    return saturate(hatching * 1.1f);
}

 PS_OUTPUT pixelShader( pixelInput2	input ) {
	PS_OUTPUT output = (PS_OUTPUT) 0;

	const float4 colorTex = colorTexture.Sample( SampleType, input.uv );

	output.Color.xyz = colorTex.xyz;
	output.Color.w = 0;//colorTex.w * 0.55;
	output.Specular = 0;//float4( 0.2f, 19.0f, 0.0f, 0.0f );
	output.Depth.r = input.position2.x / input.position2.y;

	output.Normal.xyz = normalize( input.normal );
	if ( input.IsFrontFace == false ) {
	   output.Normal *= -1.0f;
	}

	float hatchDot = saturate( dot( sunDir.xyz, output.Normal.xyz ) );
	hatchDot = ( hatchDot * 0.9f ) + 0.1f;

	if ( hatchParams.x > 0 ) {
		// Tri-planar mapping
		const float textureScale = hatchParams.y;
		const float sharpness = hatchParams.z;

		float3 localPos = input.localPos;
		float3 localNormal = input.localNormal;

		float2 yUV = localPos.xz / textureScale;
		float2 xUV = localPos.zy / textureScale;
		float2 zUV = localPos.xy / textureScale;

		float3 hatchY = Hatching( yUV, hatchDot );
		float3 hatchX = Hatching( xUV, hatchDot );
		float3 hatchZ = Hatching( zUV, hatchDot );

		float3 blendWeights = pow( abs( localNormal), sharpness );
		blendWeights = blendWeights / ( blendWeights.x + blendWeights.y + blendWeights.z );

		float3 finalHatch = hatchX * blendWeights.x + hatchY * blendWeights.y + hatchZ * blendWeights.z;

		//output.Color.xyz *= finalHatch;//saturate( hatching + hatchParams.x );
	}

	return output;
}
