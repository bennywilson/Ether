//==============================================================================
// Character_Hair_Static.kbShader
//
// 2020 kbEngine 2.0
//==============================================================================
cbuffer matrixBuffer {
	matrix		modelMatrix;
	matrix		mvpMatrix;

	// Hatching
	float4		hatchParams = (0,0,0,0);
	float4		sunDir;
};

kbShaderState {
	cullMode CullMode_BackFaces
}

//-------------------------------------
struct vertexInput {
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
	float4 normal			: NORMAL;
	float4 tangent			: TANGENT;
};

//-------------------------------------
struct pixelInput {
	float4      position	: SV_POSITION;
	float2      uv			: TEXCOORD0;
	float2      position2	: TEXCOORD1;
	float3      normal		: TEXCOORD2;
	float3		tangent		: TEXCOORD3;
};

struct pixelInput2 {
	float4      position	: SV_POSITION;
	float2      uv			: TEXCOORD0;
	float2      position2	: TEXCOORD1;
	float3      normal		: TEXCOORD2;
	float3		tangent		: TEXCOORD3;
	bool		IsFrontFace	: SV_IsFrontFace;
};
//-------------------------------------
struct PS_OUTPUT {
	float4      Color		: SV_TARGET0;
	float4      Normal		: SV_TARGET1;
	float4		Specular	: SV_TARGET2;
	float2      Depth		: SV_TARGET3;
};


/**
 *	vertexShader
 */
pixelInput vertexShader( vertexInput input ) {
	pixelInput output = (pixelInput)(0);

	float4 Pos = 0.0f;


	output.position = mul( input.position, mvpMatrix );
	output.uv = input.uv;
	output.position2 = output.position.zw;

	const float3 tangent = ( input.tangent.xyz * 2.0f ) - 1.0f;
	const float3 normal = ( input.normal.xyz * 2.0f ) - 1.0f;
		
	output.tangent.xyz = normalize( mul( cross( tangent, normal ), (float3x3)modelMatrix ) );
	output.normal.xyz = normalize( mul( normal, (float3x3)modelMatrix ) );

//	output.localPos = input.position.xyz;
	//output.localNormal = (input.normal.xyz * 2.0f ) - 1.0f;

	return output;
}

/**
 *	pixelShader
 */
Texture2D colorTexture			: register(t0);
SamplerState SampleType;

Texture2D anisoNoiseTexture			: register(t1);

float3 ShiftTangent( float3 T, float3 N, float shift ) {
	float3 shiftedT = T + shift * N;
	return normalize( shiftedT );	 
}

 PS_OUTPUT pixelShader( pixelInput2	input ) {
	PS_OUTPUT output = (PS_OUTPUT) 0;

	float noise = anisoNoiseTexture.Sample( SampleType, input.uv * float2( 5,2) ).r * 0.5f + 0.5f;
	const float4 colorTex =0;// noise;//noiseTexture.Sample( SampleType, input.uv );

	output.Color.xyz = colorTex.xyz;//25f;//input.normal;//colorTex.xyz;
	output.Color.w = 0;//colorTex.w * 0.55;
	output.Specular = float4( 0.2f, 150.0f, 0.0f, 0.0f );
	output.Depth.r = input.position2.x / input.position2.y;

	output.Normal.xyz = ShiftTangent( normalize( input.tangent.xyz ), normalize( input.normal.xyz ), noise );
	output.Normal.w = 1.0f;

	if ( input.IsFrontFace == false ) {
	   output.Normal *= -1.0f;
	}
	return output;
}
